                サンプルプログラムprimitiveの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* 最小限の「おてがる」アプリの書き方
* 線分、三角形、文字列などの基本描画命令

このサンプルプログラムで紹介されている「おてがる」コールバック関数

AutoGL_SetUp
  「おてがる」の初期設定用コールバック関数。
  main関数の代わり。
  ユーザープログラム側にこの名前で必ず一つだけ存在しなければならない。

このサンプルプログラムで紹介されている「おてがる」API

AutoGL_SetColor
  色を設定する。
AutoGL_DrawLine 
  ２点を指定して、線分を描画する。
AutoGL_DrawTriangle 
  ３点を指定して、三角形を描画する。
AutoGL_DrawQuadrangle 
  ４点を指定して、四辺形を描画する。
AutoGL_DrawString 
  開始点から、文字列を描画する。
AutoGL_DrawColorInterpolatedTriangle 
  各頂点ごとにRGBを指定して三角形を描画する。
AutoGL_DrawNormalInterpolatedTriangle 
  各頂点ごとに法線方向ベクトルを指定して三角形を描画する。
AutoGL_SetViewSize
  ビューのサイズを設定する。
AutoGL_SetViewCenter
  ビューの注視点(モデル中心)を設定する。
AutoGL_SetViewDirection
  ビューの視線方向ベクトルを設定する。
AutoGL_SetViewRedrawCallback
  再描画コールバック関数を設定する。
AutoGL_EnableDragInMode3D
  マウスドラッグ中の再描画を有効にする。



1. 概要

本サンプルプログラムは、「おてがる」アプリの最も基本的な構造を有しています。
起動すると何かを表示し、これをいろいろな角度から、拡大縮小率でながめることが
できるという、ビューアとしてのもっとも基本的な機能を実現しています。

プログラムは、ビューの再描画のための再描画コールバックRedrawView関数と、
「おてがる」アプリの初期設定を行なうためのAutoGL_SetUpより構成されています。

まあ、早い話が、まずなにかしらの三次元(二次元でもOKですが)の情報があったとして、
これをなんでもいいから適当に表示してみたいという場合には、
このサンプルプログラムをテンプレートとして独自のプログラムを作成することを
お薦めします。

その場合、RedrawViewの中身を適当に書き換えてください。
それと、描画される三次元データのサイズやレンジに併せて、
AutoGL_SetUpの前半部分、ビューイングパラメータの設定を変更して下さい。

あと、ファイルの読み込みや重い計算などはAutoGL_SetUpで行います。
ここからならコマンドライン引数も簡単に利用できますので。



2. プログラムの動作について

このプログラムは、起動するとビューウィンドウを開き、
そこにいくつかのオブジェクトを表示します。

そこに表示されるオブジェクトは、座標軸、三角形、直方体です。

座標軸の色は白です。
座標軸の描画は以下のように行なっています。
原点からそれぞれ(50, 0, 0)、(0, 50, 0)、(0, 0, 50)の３点に向けて線分を描画し、
さらに、原点に文字列"O"を、
各三点にそれぞれ文字列"X"、"Y"、"Z"を描画しています。

三角形の色は白です。
三角形の３頂点はそれぞれ(-20, 0, 0)、(0, -20, 0)、(0, 0, -20)です。

直方体は、原点に置かれたサイズ10、20、30の直方体です。
実際には、直方体の表面にあたる６枚の四辺形を描画しています。
各面をそれぞれ異なる色で表示しています。

オブジェクトの置かれている三次元空間領域をビューウィンドウにフィットするために、
ビューのサイズを70とし、
ビューの視点中心(注視点)を座標(10, 10, 10)、
そして、視線方向ベクトルを(1, 2, 3)としています。

このオブジェクトを、マウス操作により回転することができます。
また、メニューバーからPanelメニューのPanelアイテムを選択すれば、
Panelという名前のパネルウィンドウが表示されます。
この上にあるmodeチョイスボックスより移動、拡大縮小などのモードに
スイッチすることも可能です。

なお、このプログラムにはQuitボタンがついていないので、
これを起動した端末からCtrl-Cで終了して下さい。



3. ソースコードの解説

サンプルプログラムのソースコードprimitive.cを上から順に眺めてみます。

先頭にいくつかの標準C言語のヘッダファイルがインクルードされており、
そのあとに、

#include <autogl.h>

があります。「おてがる」アプリでは必ずこれが必要です。

次にでてくるのは、関数RedrawViewです。

これはビューが再描画されたりイベントが生まれるたびにコールされます。
このサンプルプログラムでは、座標軸、三角形、直方体を順に描画しています。

AutoGL_で始まる関数コールは、「おてがる」のライブラリコールです。
ここでは、以下のような「おてがる」の描画命令が用いられています。

AutoGL_SetColor : 色を設定する。
AutoGL_DrawLine : ２点を指定して、線分を描画する。
AutoGL_DrawTriangle : ３点を指定して、三角形を描画する。
AutoGL_DrawQuadrangle : ４点を指定して、四辺形を描画する。
AutoGL_DrawString : 開始点から、文字列を描画する。

あと、ここには出てきませんが、以下のような描画命令もあります。

AutoGL_DrawColorInterpolatedTriangle ： 
  各頂点ごとにRGBを指定して三角形を描画する。
AutoGL_DrawNormalInterpolatedTriangle ：
  各頂点ごとに法線方向ベクトルを指定して三角形を描画する。

「おてがる」では、基本的に点とは三次元の座標であり、
x、y、zの成分を指定します。

また、「おてがる」の色設定は、そのRed、Green、Blueの各成分について
それぞれ0.0から1.0までの輝度で指定します。
ちなみに、関数コールの引数は整数でも浮動小数点でもOKです。

とりあえず、これだけの描画命令があれば、実際まあそこそこのことができるようです。

その次は、関数AutoGL_SetUpです。

この関数は「おてがる」アプリが起動した直後に一度だけコールされます。
ここでは「おてがる」およびアプリケーション全体に関する初期設定を
行ないます。

具体的には、まず「おてがる」の初期設定として、

* パネルウィンドウ(GUI)の設定。
  パネルウィンドウやその上にのせるコントロール、ウィジェットなどを指定します。
  このサンプルプログラムではあまり出てきません。
  詳しくは、more_sample_c/のpanel.cなどを参照。

* ビューウィンドウ(グラフィックス)の設定。
  サイズ、注視点、視線方向などのビューイングパラメータを指定します。
  また、ビューの背景色、初期ウィンドウサイズなども指定できます。
  あと、ビューのイベント処理、アニメーションなども指定できるのですが、
  これは高度な話題になります。
  詳しくは、more_sample_c/のpick3d.cやselection3d.c、idle2d.cなどを参照。

同様に、アプリケーション全体の初期化として、

* ファイルの読み書き
* ある程度重い計算

などがあるでしょう。

なお、関数AutoGL_SetUpには引数がふたつ、argcとargvがあります。
これはコマンドライン引数を意味します。
めんどくさいようでしたら、とりあえずおまじないと思ってください。
「おてがる」アプリを端末から実行する際に、コマンドライン引数を渡すことが
できます。
普通、オープンしたいファイルのファイル名や、
「おてがる」アプリの動作を制御するフラグ、オプションデータなどを
コマンドライン引数として渡します。

さて、このサンプルプログラムのAutoGL_SetUpの本体は、
主に２つのパートより構成されています。

前半では、ビューイングパラメータの設定を行なっています。
このなかで、AutoGL_SetViewSizeは実用上最低限必要なコールです。
これは、表示されるモデルのワールド座標系に関するサイズで、
ワールド座標系におけるこの範囲がビューウィンドウに収まるようになります。
これをしないと、ビューのサイズがデフォルト設定の１になってしまいます。
そのほかに、AutoGL_SetViewCenterは注視点、つまり表示されるモデルの
ワールド座標系におけるモデル中心を設定します。
また、AutoGL_SetViewDirectionは、視線方向ベクトルを設定します。
なお、デフォルトは並行投影です。
透視投影を用いたい場合は、
サンプルプログラムのmore_sample_c/more_primitive.cを御覧下さい。

後半はほとんどおまじないです。
これは三次元空間上のオブジェクトをあつかうアプリケーションの設定になっています。
まあ、そのままコピれば、だいたい動作します。
二次元アプリの場合は、例えばmore_sample_c/のcontour.cなどを参照。

なお、AutoGL_SetViewRedrawCallbackのコールのところに、
RedrawViewがあるのにお気付きでしょうか。
この「おてがる」ライブラリコールによって、すでに出てきている関数RedrawViewが
ビューの再描画コールバックとして指定されています。

また、AutoGL_EnableDragInMode3Dコールは、ビューをマウスドラッグしている間の
再描画をオンにします。
これをコールしない場合には、ドラッグをしている最中には再描画はなされず、
ドラッグを終了する際にマウスボタンをリリースしたときに、
初めてビューの再描画が行われます。
表示すべきモデルがより大規模になって描画が重くなってきた場合には、
マウスドラッグをオフにしたほうが効率的です。
