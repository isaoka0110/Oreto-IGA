                サンプルプログラムcontourの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* スムーズコンター
* コンターマップのカラーテーブルの選択と変更

このサンプルプログラムで紹介されている「おてがる」API

AutoGL_DrawSmoothContourQuadrangle 
  四辺形領域内部にスムーズコンターを描画する。
AutoGL_DrawSmoothContourTriangle 
  三角形領域内部にスムーズコンターを描画する。
AutoGL_DrawContourMap
  画面右端にコンターマップを表示する。



1. 概要

サンプルプログラムcontourでは、「おてがる」可視化ユーティリティの
スムーズコンター機能を紹介しています。

「おてがる」可視化ユーティリティは、二次元あるいは三次元における
さまざまな物理量の可視化に関する機能を実現しています。

例えば、二次元平面上、または三次元空間のある表面上のスカラー場について、
これをコンタープロット表示することは、
スカラー場の可視化手段としてよく行なわれることです。
本サンプルプログラムは、このコンター表示を実現するための
デモプログラムです。



2. プログラムの動作について

このプログラムは、起動するとコンタープロットを表示します。
虹色の七色の間がスムーズに補間されるように塗りつぶされています。
これは一般にスムーズコンターと呼ばれます。

コンタープロットの対象となるスカラー場は、二次元の100 x 100で分割された
直交差分格子上に分布するものです。
このプログラムでは、x、yに関する適当なスカラー関数を利用して
このスカラー場を生成していますが、これをファイルから読み込むなどすれば、
コンタープロットのためのビューアとして使うことができるようになります。

このスカラー場のコンタープロットでは、これを７色のコンターカラーマップに
マップします。
ここではコンターの最小値を-1.0、最大値を5.0としています。
また、画面の右端に、コンターバーが表示されています。

マウスをドラッグすると、ビューが拡大あるいは縮小します。
ただし、マウスのドラッグ中は再描画しないようにしています。

それ以外のモードにするには、まずメニューバーからPanelを表示し、
そのmodeチョイスボックスからモードを変更します。
なお、このサンプルプログラムは二次元アプリケーションなので、
移動と拡大縮小だけが可能です。
回転のモードはありません。



3. ソースコードの解説

ソースコードcontour.cを上から眺めていきます。

「おてがる」のヘッダファイルを読み込んだあと、
スカラー値に関するグローバル変数GridValuesが定義されています。
この変数は、x、y方向にそれぞれCELLS (=100) 分割した直交差分格子にある、
(CELLS + 1) x (CELLS + 1)の各格子点上のスカラー値を表現します。

その次に、コンター表示の最大値、最小値を表わす変数MinRange、MaxRangeが
定義されています。

関数Functionは適当にでっちあげたスカラー場を表わすための、
引数x、yに関するスカラー関数です。
これを用いて、次の関数InitializeGridではスカラー場を表現する変数
GridValuesを初期化しています。

関数PlotContourが、コンター表示を行なうところです。
ここにあるように、コンタープロットは、このスカラー場が分布する差分格子を
構成するすべてのセル、つまり、この例では計一万個の四辺形について、
スムーズコンターを描画していくことで生成されます。
スムーズコンターの場合、指定した領域内を七色がなめらかに補間されていきます。

各セルのスムーズコンターは、
「おてがる」のAutoGL_DrawSmoothContourQuadrangleによってなされます。
これは、「おてがる」の可視化ユーティリティに所属し、
四辺形の内部にスムーズコンターを表示するものです。

AutoGL_DrawSmoothContourQuadrangleの引数は、順に、コンターの最大値、最小値、
および、四辺形の各頂点ごとに、x、y、z座標とスカラーの値を並べます。
ちなみに、三角形の場合は、
AutoGL_DrawSmoothContourTriangleとなります。
詳しくは、マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
可視化ユーティリティのセクションか、
または、「おてがる」ヘッダファイルautogl.hよりインクルードされている、
lib/autogl_visualization.hを御覧下さい。

スムーズコンターの他に、線コンター表示もできます。
これについては、サンプルプログラムのmore_sample_c/line_contour.cを参照。

次に、再描画コールバックRedrawViewです。
本サンプルプログラムでは、ディスプレイリストを用いて描画を高速化しています。
これについては、サンプルプログラムのmore_sample_c/graph3d.cに
より詳しい説明があります。
このプログラムでは、関数PlotContourで描画されるすべてのものが
ディスプレイリストにいったん収納されています。

あと、注目すべき点としては、RedrawViewのなかに、画面の右端にでてくる
コンターバーの表示ルーチン、AutoGL_DrawContourMapがあります。
最初の引数の80は、ビューウィンドウ内のコンターバー領域の幅を表す
ピクセル数です。
なお、このコールをディスプレイリストに収納してはいけません。

初期化関数AutoGL_SetUpの後のほうですが、
コメントになっている「おてがる」コールがいくつかあります。
これらのうち一つを選択してコメントアウトすると、
コンターマップのカラーテーブルが変更されます。
これらは「おてがる」可視化ユーティリティのコンターに関するAPIです。
それぞれ、

AutoGL_SetGrayScaleContourMap ： グレイスケール
AutoGL_SetContourMap_BCGYRM   ： 虹色(青、水色、緑、黄色、赤、紫の順)
AutoGL_SetContourMap_MBCGYR   ： 虹色(紫、青、水色、緑、黄色、赤の順)
AutoGL_SetContourMap_BCGYR    ： 虹色(青、水色、緑、黄色、赤の順)

デフォルトでは青から紫までのAutoGL_SetContourMap_BCGYRMが
用いられています。

また、これ以外の独自のカラーテーブルを定義することもできます。
詳しくは、マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
可視化ユーティリティ、コンターのセクションか、
または、「おてがる」ヘッダファイルautogl.hよりインクルードされている、
lib/autogl_contour.hを御覧下さい。

さらに進んで、コンターの色付けについてより細かい変更を行いたい場合には、
独自のバージョンを作成することをお薦めします。
そのときは、「おてがる」可視化ユーティリティのコンターの
セクションにあるソースコードが参考にできると思います。
ソースコードはlib/autogl_contour.c、
ヘッダファイルはlib/autogl_contour.hです。

なお、この部分を直接変更してしまうと、
後で「おてがる」のバージョンアップ時に問題になります。
したがって、ここにある実装のどれかをテンプレートとして
「おてがる」側から自分のコード側にコピーして関数名を変更し、
自分専用バージョンを作成するのが得策です。

実は、「おてがる」のコードのうちユーティリティの部分については、
まずこういった形でユーザー側で作成されたルーチンがあって、
その中から比較的再利用性の高いものをユーザーからもらって
こちらで再構成したものがけっこうあります。



# 旧バージョンの「おてがる」ユーザーへ

現バージョンでは新規に高レベル可視化ユーティリティが用意されました。
AutoGL_DrawSmoothContourQuadrangleやAutoGL_DrawSmoothContourTriangleは
その一つです。
また、サンプルプログラムも書き換えられています。

これに併ない、旧バージョンで用いられていたAutoGL_DrawContourTriangleは
低レベル可視化ユーティリティに配置されました。
これ自体も引続きサポートされています。
