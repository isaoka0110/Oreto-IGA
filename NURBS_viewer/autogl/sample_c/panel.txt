                サンプルプログラムpanelの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* パネルを有する「おてがる」アプリ
* パネル上の各種GUIコントロール(ウィジェット)
* 「おてがる」の制御変数
* 「おてがる」のコールバック
* ビューウィンドウ上のある決まった場所に描画する方法

このサンプルプログラムで紹介されている「おてがる」API

AutoGL_DrawStringAtScaledPosition
 ビューウィンドウ上の指定位置に文字列を表示する。
AutoGL_DrawView
  再描画コールバックを強制的にコールする。
AutoGL_SetViewRedrawCallback
  再描画コールバック関数を設定する。
AutoGL_SetDefaultCallbackInMode3D
  ビューウィンドウのイベント処理を三次元アプリケーション用に指定する。
AutoGL_EnableDragInMode3D
  マウスドラッグ中の再描画を有効にする。
AutoGL_SetPanelInMode3D
  三次元アプリケーションとして、modeチョイスを作成する。
AutoGL_AddComment
  コメントを「おてがる」に登録する。
  ラベルを生成する。
AutoGL_AddString
  文字列の制御変数を「おてがる」に登録する。
  テキストフィールドを生成する。
AutoGL_AddBoolean
  論理値の制御変数を「おてがる」に登録する。
  トグルを生成する。
AutoGL_AddInteger
  整数の制御変数を「おてがる」に登録する。
  テキストフィールドまたはチョイスを生成する。
AutoGL_AddReal
  実数の制御変数を「おてがる」に登録する。
  テキストフィールドを生成する。
AutoGL_SetLabel
  コントロールのラベル文字列を設定する。
AutoGL_AddIntegerItem
  チョイスにアイテムを追加する。
AutoGL_AddCallback
  コールバックを「おてがる」に登録する。



1. 概要

本サンプルプログラムは、「おてがる」アプリのGUIのデモです。

多くの「おてがる」アプリケーションは、基本構成として、
一つのビューウィンドウおよび、一つまたは複数個のパネルウィンドウから
成り立ちます。
すべてのパネルウィンドウはデフォルトではビューウィンドウの
メニューバーに収納してあります。
メニューバーのPanelメニューをプルダウンすると、
その「おてがる」アプリに存在するパネルのリストがでてきます。
これらはトグルスイッチになっているので、
どれかを選べばそのパネルウィンドウが表にあらわれ、
もう一度それを選べば、今度はスクリーンから隠れます。
通常、スクリーンの広さは有限なので、
そのとき必要となるパネルだけを表に出して使い、
いらなくなったら隠すようにします。

なお、このサンプルプログラムは、ビューが一つでパネルが一つだけの
「おてがる」アプリです。
複数のパネルを作成したい場合は、
他のサンプルプログラムのmore_sample_c/grid2d.cまたはgrid3d.cを参照。

パネルウィンドウの上に置かれるGUI部品(コントロールあるいはウィジェットとも
呼ばれる)としては、ラベル、ボタン、チョイス(ラジオボタン)、
トグル(チェックボックス)、そして、テキストフィールドがあります。
通常これだけのGUIコンポーネントがあれば、
ビューアやエディタとして十分なアプリケーションが作れます。



2. プログラムの動作について

このプログラムは、起動するとビューウィンドウを開き、
そこにいくつかのオブジェクトを表示します。

まず、画面の中心には、座標軸および、
各辺がさまざまな色でぬられた直方体の箱が表示されています。
原点のあたりから、"Hello, world !"という文字列が表示されています。
また、直方体の、原点と反対側の頂点には、"Number:20"が表示され、
さらに、画面の左下隅には"Value = 0.5"があります。

これをマウスでドラッグし、回転することができます。
回転すると、原点の"Hello, world !"および
直方体の頂点で表示されている文字列"Number:XXXX"の位置は移動しますが、
画面左下隅のもの"Value = XX.XX"は移動せず、
そこにはりついたままです。

とりあえずここで終了しないでください。
ここからが本番です。

このサンプルプログラムにはパネルが一つだけ存在し、
その名前はPanelとなっています。
ビューウィンドウのメニューバーからPanelメニューをプルダウンすると、
Panelというアイテムが一つだけでてきます。
これを選択すると、
今度はPanelという名前のウィンドウがあらわれます。
これが先ほど説明したパネルウィンドウです。

このパネルウィンドウには、これまでにも出てきたmodeチョイスボックスの他に、
いくつかのGUIコントロール(ウィジェット)が登場しています。
上から順に、modeチョイスボックス(ラジオボタン)、
OriginLabelテキストフィールド、Numberテキストフィールド、
Valueテキストフィールド、show axisトグルボタン(チェックボックス)、
Shapeチョイスボックス、およびDrawボタンとPrintボタンというふうに
並んでいます。
OriginLabelには"Hello, world !"、Numberには20、Valueには0.5が
それぞれはいっています。
show axisにはチェックがついていて、
またShapeの値はboxになっています。

OriginLabelをクリックしてそこを編集し、その後でDrawボタンを押すと、
ビューの"Hello, world !"だったところが現在入力した文字列に置き代わります。
NumberやValueも同様です。
ただし、Numberには整数を、
Valueには数字(整数または実数)だけをそれぞれ入れて下さい。
show axisのチェックをはずすと座標軸が表示されなくなります。
チェックを付けると元にもどります。
Shapeをboxからlineにすると、画面の表示が直方体の枠線だけ、
つまりワイヤーフレーム表示になります。
また、triangleにすると、原点に３枚の三角形が表示されます。
どの場合も、パネルウィンドウ上のコントロール(ウィジェット)を変更したあと、
いったんDrawボタンを押して下さい。
あるいは、Drawボタンを押さずに、そのかわり、
なんらかのマウスオペレーションをビューウィンドウで行なえば、
その場で画面が更新されます。

一方、Printボタンを押してみてください。
端末のほうに、以下のようなメッセージが何行か表示されます。

 PRINT
 OriginLabel is <<Hello, world !>>
 AxisIsShown is 1
 Shape is SHAPE_BOX
 Number is 20
 Value is 0.50000

上は例です。パネルウィンドウ上でのこれまでの操作により、
いくぶん異なったものが表示されると思います。
これらは、現在の時点でのパネル上の各コントロールの値を示しています。
いろいろとコントロールの値を変更し、Printボタンを押してみましょう。

あと、ついでですが、上記のメッセージを覚えておいて下さい。
ソースコードの説明のところで、何度かまたこれがでてきます。

あと、このサンプルプログラムも同様に、Ctrl-Cで終了します。
(まあ、せっかくのGUIアプリなんですから、
Quitボタンを用意すればいいわけなんですが...)



3. ソースコードの解説

サンプルプログラムのソースコードpanel.cを上から順に眺めてみます。

「おてがる」ヘッダファイルautogl.hのインクルードのあとに、
いくつかグローバル変数の値がでてきます。
順に、文字列OriginLabel、整数変数AixsIsShown、Shape、Number、
あとは浮動小数点変数のValueです。
整数変数AixsIsShownは、プログラム内では0または1の値しかとりません。
つまり、TrueかFalseの論理値変数(C++などでのboolean)として使われています。
一方、同じく整数変数Shapeには、#defineで定義されている3つの値、
SHAPE_LINE(＝0)、SHAPE_TRIANGLE(＝1)、SHAPE_BOX(＝2)のどれかが設定されます。
これを、enum型として定義したほうがよかったかもしれません。
あと、最後の整数変数Numberには、一般の数が入ります。

感のよいかたはもう気がつかれたと思います。
これらは、Printボタンを押したときにでてくるメッセージと直接対応します。
というより、これらは、
パネルウィンドウ中の各コントロールのラベルとほぼ一対一に対応します。
「おてがる」では、これらを制御変数と呼んでいます。
制御変数は通常、グローバル変数である必要があります。
また、各制御変数は、文字列(文字配列)、整数変数、
あるいは倍精度浮動小数点変数のどれかである必要があります。
整数変数については、一般の整数として、
あるいは、論理値(0か1)や列挙型(0から始まる数個)としてあつかわれます。

次にでてくる関数Printにご注目ください。
Printボタンを押した際に実行されるのが、この関数であることは自明です。
この関数は単に、このサンプルプログラムにあるすべての「おてがる」の
制御変数を表示しているだけです。
なお、この関数Printの名前を覚えておいて下さい。
あとでまた出てきます。

次は、再描画コールバック関数RedrawViewです。
「おてがる」の制御変数の値にしたがって、
ビューに表示されるオブジェクトを描画しています。
順に、詳しく見ていきます。

AxisIsShownは座標軸を表示するかどうかを決定しています。
これが1なら、座標軸が描画され、一方0なら、なにもおこりません。

Shapeはどのような形を実際に描画するかを決めています。
SHAPE_LINE、SHAPE_TRIANGLE、およびSHAPE_BOXの3ケースがあります。
SHAPE_LINEのときは、直方体の12本の稜線を描画し、
ワイヤーフレーム表示を行います。
SHAPE_TRIANGLEのときは、3枚の三角形を描画します。
SHAPE_BOXのときは、直方体をソリッド表示します。
直方体の各面は、それぞれ異なった色で塗りつぶされています。

そのあと、直方体の原点と反対側にある頂点(10, 20, 30)から
Numberの値を文字列として描画しています。

最後に、画面の左下隅にValueの値を描画します。
AutoGL_DrawStringAtScaledPositionは、
ビューウィンドウ上の指定位置に文字列を表示します。
このとき、位置は左下隅から図った比率で指定します。
左下が(0.0, 0.0)、右上が(1.0, 1.0)となります。
ワールド座標ではなく、画面での相対位置で指定できるため、
なんらかの情報を画面に固定して表示するのに便利です。

再描画コールバックRedrawViewを抜けると、そのあとは関数Drawです。
ここにあるAutoGL_DrawViewは、上記の再描画コールバック関数RedrawViewを
強制的にコールするものです。

さて、ここまでで、関数Printと関数Drawのふたつの関数がでてきました。
また、これらはそれぞれ、パネルウィンドウの下のほうにあった2つのボタン、
PrintボタンとDrawボタンの動作に対応することもお分かりかと思います。
つまり、PrintボタンまたはDrawボタンを押すと、
結果的には何故かこれらの関数がコールされることになるわけです。
これらの関数は、このサンプルプログラムにおける
「おてがる」のコールバック関数です。
「おてがる」のコールバック変数は、
何も引数をとらず、また戻り値として何も返しません。
つまり、void function (void)の形式をとる関数となります。

このあと、「おてがる」の初期化コールバックAutoGL_SetUpがでてきます。
先頭のセクションでは、上記の「おてがる」の制御変数群を
適当な値で初期化しています。
これらの値は、このサンプルプログラムを起動したときに最初に表示されるものに
対応します。

次に、これまでと同様にビューイングパラメータや各種設定を行います。
ここでは、これまでおまじないとしてあつかっていたいつくかのAPIについて
説明します。

AutoGL_SetViewRedrawCallbackは、void function (void)形式の関数の名前を
引数にとり、この関数を「おてがる」の再描画コールバックとして指定します。
なんらかの理由でビューが再描画されなければならなくなったとき、
ここで指定された再描画コールバック関数がコールされます。

なお、正確には、関数の名前というよりも、
関数へのポインタを引数としているといったほうが文法的には正しい表現です。
くわしくは、Ｃ言語の解説書の関数ポインタのところを参照してください。
ただ、「おてがる」ではあまり複雑なものはでてきません。
ここでは、関数名をそのまま渡す、と覚えておけば十分です。

AutoGL_SetDefaultCallbackInMode3Dは、ビューウィンドウの
マウスやキーボードに関するイベント処理を三次元アプリ用に指定します。
このサンプルプログラムでは特別なイベント処理をおこなっていないので、
引数はNULLとします。
ここをNULLとしない場合、ここにはモードがその他(Other)のときに実行される
イベント処理のためのコールバック関数を指定します。
詳しくは、サンプルプログラムのmore_sample_c/pick2d.c、pick3d.cや
selection2d.c、selection3d.cなどを御覧下さい。

AutoGL_EnableDragInMode3Dは、マウスドラッグ時の再描画コールバックの
呼出を有効にします。
レンダリングが十分高速であれば、マウスの動きにしたがってスムーズに
オブジェクトが変化します。
一方、レンダリングが重いときには、これを有効にしないほうがいいでしょう。

そのあとは、パネルウィンドウのコントロールを準備するセクションです。
ここからは、「おてがる」のGUIに関するAPIが続きます。

まず、AutoGL_SetPanelInMode3Dです。
この「おてがる」APIはこれまでもたびたび出てきていましたが、
今回ようやく説明できるようになりました。
これは、パネルウィンドウに三次元アプリケーションとしての
modeチョイスボックスを表示します。
三次元アプリでは、移動、二種類の回転、拡大縮小および、その他(Other)の
モードが使えます。

次は、AutoGL_AddCommentです。
これにより、パネルウィンドウ上にラベルコントロールが作成されます。
この段階では、ラベルコントロールのラベル文字列は空文字なので、
このままだとパネルウィンドウに空行があらわれます。
続いて、AutoGL_SetLabelにより、
ラベル文字列が"Model Parameters"に設定されます。

さらに、AutoGL_AddStringです。
これは、文字列型の制御変数を「おてがる」に登録します。
引数は順に、この制御変数に関するcharポインタ、制御変数の名前を示す文字列、
そして、その文字配列のサイズです。
ここでは、文字配列OriginLabelの名前(＝charポインタ)、
文字列"OriginLabel"、
および文字配列OriginLabelのサイズである80を指定しています。

ちなみに、制御変数の名前については、アルファベットおよび数字の組合せであれば
なんでもかまいません。
ふつうは、C言語での変数名と同じものを指定するほうが、
プログラムのメンテナンス上楽になります。
また、この名前はパネルウィンドウ上において、
各コントロールのラベルとしてでてきます。
この名前が気にいらないときには、別途AutoGL_SetLabelにより
ラベルとなる文字列を指定することができます。

ここでこの文字列の制御変数OriginLabelを「おてがる」に登録したことにより、
パネルウィンドウ上には、これに対応するテキストフィールドが作成されます。
このテキストフィールドは、制御変数の名前"OriginLabel"をラベルとし、
また、値の部分には制御変数OriginLabelの値が表示されます。
また、「おてがる」アプリのユーザーがこのテキストフィールドの値を編集すると、
制御変数OriginLabelの値が書き変わります。

次は、AutoGL_AddIntegerです。
これは、整数型の制御変数を「おてがる」に登録します。
引数は、intポインタ、および、制御変数の名前をあらわす文字列です。
これを用いて、整数型の制御変数Numberを「おてがる」に登録します。
ここでも、前回の制御変数OriginLabelの場合と同様、
この制御変数Numberのプログラム側での変数名である"Number"を指定しています。
これは、パネル上にテキストフィールドを作成します。
ここには、整数値しか入力できません。
入力された値により、制御変数Numberの値が上書きされます。

さらに、AutoGL_AddRealです。
これは、浮動小数点型の制御変数を「おてがる」に登録します。
引数は、doubleポインタ、および、制御変数の名前をあらわす文字列です。
これを用いて、doubleの制御変数Valueを「おてがる」に登録します。
これもまた、パネル上にテキストフィールドを作成します。
ここには、整数または小数値しか入力できません。
入力された値により、制御変数Valueの値が上書きされます。

このあとは、AutoGL_AddBooleanです。
これは、論理値型の制御変数を「おてがる」に登録します。
引数は、intポインタ、および、制御変数の名前をあらわす文字列です。
これを用いて、制御変数AxisIsShownを「おてがる」に登録します。
整数変数AxisIsShownはここでは論理値変数として用いているので、
0または1どちらかの値が有効です。
これは、パネル上にトグルボタン(チェックボックス)を作成します。
なお、ここでは、プログラムでの名前AxisIsShownは、
GUI上では読みにくいということで、
AutoGL_SetLabelにより"show axis"と特別にラベルを設定しています。
チェックがついていれば、制御変数AxisIsShownの値は1となり、
なければ0に設定されます。

続いて、AutoGL_AddIntegerがまたでてきます。
こんどは、整数変数を列挙型の制御変数として「おてがる」に登録しています。
この「おてがる」コールにつづいて、AutoGL_AddIntegerItemがいくつか登場します。
整数変数Shapeは、このサンプルプログラムでは0、1、2の値だけをとる
列挙型としてあつかわれています。
SHAPE_LINE、SHAPE_TRIANGLE、SHAPE_BOXはそれぞれ0、1、2とdefineされています。
これに対応するように、パネルウィンドウ上にはチョイスボックスおよび
その中に3つのラジオボタンが作成されます。
チョイスボックスのラベルは"Shape"で、3つのラジオボタンのラベルは順に
"line"、"triangle"、"box"となり、これらはそれぞれ0、1、2に対応します。
これらのうち、現在選択されているラジオボタンに対応する0、1、2のどれかの値が
制御変数Shapeに設定されます。

最後に、前にでてきた2つのコールバック関数、PrintとDrawが
「おてがる」に登録されています。
AutoGL_AddCallbackは、コールバックを「おてがる」に登録します。
引数は、void function (void)形式の関数へのポインタおよび、
コールバックの名前をあらわす文字列です。
制御変数と同様、プログラムの関数名と同じものを設定します。
プログラム内での名前をそのままGUI上にだすと見栄えが気になる場合は、
AutoGL_AddCallbackコールの直後にAutoGL_SetLabelにより
ラベルを指定して下さい。
なんにせよ、これにより、ボタンが作成されます。
このボタンを押すと、指定したコールバック関数がコールされます。
