                サンプルプログラムpick2dの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* 二次元イベント処理
* 二次元の点をピックする方法

このサンプルプログラムで紹介されている「おてがる」API

AutoGL_DrawDiamondMark2D
  ダイアモンドマークを描画する。
AutoGL_GetViewEvent
  イベントの種類を調べる。
AutoGL_PointingDeviceIsHit2D
  指定のワールド座標のそばでマウスピックがおきたかどうかを調べる。
AutoGL_DrawView
  再描画コールバックを強制的にコールする。
AutoGL_HandleDefaultKeyEventInMode2D
  二次元アプリケーション用にデフォルトキーボードイベント処理を行なう。
AutoGL_SetDefaultCallbackInMode2D
  ビューウィンドウのイベント処理を二次元アプリケーション用に指定する。
  また、Otherモードでのイベント処理コールバック関数を指定する。
AutoGL_SetMode2D
  ビューウィンドウの初期状態でのモードを設定する。



1. 概要

サンプルプログラムpick2dでは、「おてがる」二次元ユーティリティの
二次元イベント処理機能を紹介しています。

「おてがる」二次元ユーティリティは、二次元アプリケーションのための
一般的なユーティリティ機能を実装しています。
このサンプルプログラムは、このうち、二次元アプリケーション用の
マウスやキーボードからのイベント処理について説明しています。

詳しくは、マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
二次元ユーティリティのセクションか、
または、「おてがる」ヘッダファイルautogl.hよりインクルードされている、
lib/autogl_utility2d.hを御覧下さい。

また、ビューでのイベント処理一般については、以下も関係します。
マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
グラフィックスにおけるイベント処理セクションか、
または、「おてがる」ヘッダファイルautogl.hよりインクルードされている、
lib/autogl_graphics.hを御覧下さい。



2. プログラムの動作について

このプログラムは、起動すると二次元のオブジェクトを表示します。

画面には、５本の線分から構成されるポリラインが表示されており、
さらにその６つの頂点には、赤いダイヤモンドのマークがついています。

ここで、その赤いマークのどれかをマウスの左ボタンでクリックしてみましょう。
それが選択されてダイアモンドが塗りつぶされ、
一方、端末にはメッセージが表示されます。
メッセージから、選択された頂点の番号(０から開始される)が分かります。
別のマークを選択すれば、これまで選択されていたものはクリアされます。
その他の部分を選択しようとすれば、すべての選択が解除されます。

また、このサンプルプログラムは二次元アプリケーションなので、
メニューバーからPanelを表示し、移動や拡大縮小ができます。
modeチョイスのモードをその他(Other)にすると、
マウスによる頂点の選択ができるようになります。



3. ソースコードの解説

ソースコードpick2d.cを上から眺めていきます。

「おてがる」のヘッダファイルを読み込んだあと、
いくつかのグローバル変数が登場します。

最初の変数SelectedVertexIdは、
現在選択されている頂点の番号を記録しています。
選択されていれば、0から5までの整数のどれかをとり、
また、なにも選択されていなければ、-1となります。

次の変数Vertexsはポリラインを構成する各頂点の二次元座標を表します。

再描画コールバックRedrawViewでは、二次元平面の座標軸を描画し、
続いてポリラインを描画します。
さらに、forループで各頂点をまわり、
AutoGL_DrawDiamondMark2Dという「おてがる」APIにより
ダイアモンドマークを描画します。
これは、二次元ユーティリティのひとつです。
ここで、もしその頂点が選択されていれば、マークを塗りつぶします。

このあと出てくる関数HandleEventは、イベント処理のためのコールバックです。
このサンプルプログラムにおいてイベント処理コールバックHandleEventは、
ビューへのマウスやキーボードアクションが生じるたびにコールされます。

ここでは、まず、AutoGL_GetViewEventコールによりイベントの種類を得ています。
以下のようなイベントがあります。

AUTOGL_EVENT_POINTING_DEVICE_PRESS : マウスボタンが押された。
AUTOGL_EVENT_POINTING_DEVICE_DRAG : マウスがドラッグされた。
AUTOGL_EVENT_POINTING_DEVICE_RELEASE : マウスボタンが離された。
AUTOGL_EVENT_KEY : キーボードのキーが押された。

マウスクリックに対応してなにかしたいのなら、
ポインティングデバイスであるマウスのボタンがリリースしたタイミングで、
このコールバックの中でそれを行います。
このサンプルプログラムでは、どれかの頂点のそばでマウスクリックがあったか
どうかを調べます。
もしあれば、その頂点を選択し、
選択したタイミングで端末にメッセージを表示します。
一方、なにも選択されなければ、SelectedVertexIdには-1が入っているはずです。

ここで、「おてがる」APIのAutoGL_PointingDeviceIsHit2Dは、
指定した座標のそばでマウスイベントが起きたかどうかをチェックします。
引数は、ワールド座標系におけるx、y座標、および、
ピックのトレランスをデバイス座標系でのピクセル数で指定します。

なんにせよ、なんらかの変化があれば、ビューを再描画するため、
AutoGL_DrawViewをコールします。

あと、なんらかのキーボードイベントが生じたときには、
「おてがる」二次元アプリケーションとしてのデフォルト処理
AutoGL_HandleDefaultKeyEventInMode2Dを実行します。

最後に、初期化コールバックAutoGL_SetUpでは、
「おてがる」APIのAutoGL_SetDefaultCallbackInMode2Dをコールしています。
これは、イベント処理を二次元アプリケーション向けに設定し、
マウスによる移動や拡大縮小ができるようにします。
ここで、モードがその他(Other)のときに生じるイベントを処理するため、
関数HandleEventをイベント処理コールバックに指定しています。
イベント処理のコールバックはvoid function (void)形式でなければなりません。

あと、「おてがる」APIのAutoGL_SetMode2Dにより、
初期状態でのモードをその他(Other)にしています。

ちなみに、二次元アプリケーション設定では、
ビュー上でキーボード入力すると以下のようにモードが切りかわります。

Oまたはoキー : Other その他
Tまたはtキー : Translate 移動
Sまたはsキー : Scale 拡大縮小

そろそろモード切替えのマウス操作がウザくなってきたころでしょうから、
活用してみてください。
