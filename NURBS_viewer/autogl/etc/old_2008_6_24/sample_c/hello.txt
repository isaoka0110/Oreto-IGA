                サンプルプログラムhelloの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説
3.1. プログラムの全体構成について
3.2. プログラムの詳細について
4. 新規にプログラムを開発したい場合



1. 概要

サンプルプログラムhelloは、もっとも基本的な「おてがる」アプリの構成を
もったプログラムです。
わりとシンプルですが、普通のプログラムとは若干違った部分もありますので、
そこらへんをいろいろ紹介していこうと重います。

サンプルプログラムhelloのコンパイルのやり方やプログラムの実行の方法については、
READMEを参照してください。



2. プログラムの動作について

このプログラムは、起動するとビューウィンドウを開き、
そこにいくつかのオブジェクトを表示します。

そこに表示されるオブジェクトは、座標軸、三角形、直方体、そして文字列です。

座標軸の色は白です。
座標軸の描画は以下のように行なっています。
原点からそれぞれ(50, 0, 0)、(0, 50, 0)、(0, 0, 50)の３点に向けて線分を描画し、
さらに、原点に文字列"O"を、
各三点にそれぞれ文字列"X"、"Y"、"Z"を描画しています。

三角形の色は赤です。
三角形の３頂点はそれぞれ(-20, 0, 0)、(0, -20, 0)、(0, 0, -20)です。

直方体の色はシアン(つまり、水色。緑と青の混色)です。
原点に置かれたサイズ10、20、30の直方体です。
実際には、直方体の表面にあたる６枚の四辺形を描画しています。

文字列"Hello, world !"の色は黄色(赤と緑の混色)です。
ちょうど直方体の頂点にあたる座標(10, 20, 30)から描画しています。

オブジェクトの置かれている三次元空間領域をビューウィンドウにフィットするために、
ビューのサイズを70とし、
ビューの視点中心(注視点)を座標(10, 10, 10)、
そして、視線方向ベクトルを(1, 2, 3)としています。

このオブジェクトを、マウス操作により回転することができます。
また、メニューバーからPanelメニューのPanelアイテムを選択すれば、
Panelという名前のパネルウィンドウが表示されます。
この上にあるmodeチョイスボックスより移動、拡大縮小などのモードに
スイッチすることも可能です。

なお、このプログラムにはQuitボタンがついていないので、
これを起動した端末からCtrl-Cで終了して下さい。



3. ソースコードの解説

では、ソースコードhello.c本体の解説です。



3.1. プログラムの全体構成について

まず、プログラムの全体構成から。

見ていただいてわかる通り、「おてがる」アプリにはmain関数がありません。
そのかわり、下のほうにAutoGL_SetUpというあやしげな関数があります。
とりあえず、これをmain関数のかわりだと思ってください。
御覧のとおり、コマンドライン引数も使えます。

「おてがる」アプリのmain関数自体は、「おてがる」ライブラリの本体内部にあります。
ただし、Windows環境では、mainではなくWinMainとなります。
AutoGL_SetUpは、これら「おてがる」ライブラリの本体内部にあるmain関数または
WinMain関数から、プログラムの起動直後に一度だけコールされます。

あと、上のほうにRedrawViewという関数があります。
これは、再描画関数であり、ビューウィンドウが再描画される必要があるたびに、
またマウスやキーボードからのイベントがあるたびに呼ばれるものです。

そうすると、単純な「おてがる」アプリの書き方は以下のようになります。

まず、AutoGL_SetUpという関数を用意します。
ここには、プログラムが起動してからすぐに行なうべき初期設定を記述します。
「おてがる」アプリはイベント駆動型なので、いったん起動すると
半永久的にユーザーからのイベントを待ち続けます。
ファイルの入出力などはここの段階で行なっておくのが無難です。
あるいは、パネルウィンドウ上にユーザー定義のボタンを作成するという手も
ありますが、これはすこしだけ高度な話題になります。
詳しくは、more_sample_c/のサンプルプログラム、たとえばpanel.cなどを参照のこと。

次に、RedrawViewという関数を用意します。
ここでは、主に描画したいオブジェクトを「おてがる」の描画命令により指定します。
ファイル入出力や重い計算など、あまり計算時間のかかることは
ここでは避けたほうがよいです。



3.2. プログラムの詳細について

次に、プログラムを上から順に眺めてみます。

先頭にいくつかの標準C言語のヘッダファイルがインクルードされており、
そのあとに、

#include <autogl.h>

があります。「おてがる」アプリでは必ずこれが必要です。

次にでてくるのは、関数RedrawViewです。

これはビューが再描画されたりイベントが生まれるたびにコールされます。
サンプルプログラムhelloでは、座標軸、三角形、直方体、
そして文字列"Hello, world !"を順に描画しています。

AutoGL_で始まる関数コールは、「おてがる」のライブラリコールです。
ここでは、以下のような「おてがる」の描画命令が用いられています。

AutoGL_SetColor : 色を設定する。
AutoGL_DrawLine : ２点を指定して、線分を描画する。
AutoGL_DrawTriangle : ３点を指定して、三角形を描画する。
AutoGL_DrawQuadrangle : ４点を指定して、四辺形を描画する。
AutoGL_DrawString : 開始点から、文字列を描画する。

「おてがる」では、基本的に点とは三次元の座標であり、
x、y、zの成分を指定します。

また、「おてがる」の色設定は、そのRed、Green、Blueの各成分(輝度)について
それぞれ0.0から1.0までの実数で指定します。
例えば、AutoGL_SetColor (1, 1, 0)は黄色になります。

その次は、関数AutoGL_SetUpです。

この関数は「おてがる」アプリが起動した直後に一度だけコールされます。
ここでは「おてがる」およびアプリケーション全体に関する初期設定を
行ないます。

このサンプルプログラムでは、
AutoGL_SetUpの本体は主に２つのパートより構成されています。

前半では、ビューイングパラメータの設定を行なっています。
このなかで、AutoGL_SetViewSizeは実用上最低限必要なコールです。
これをしないと、ビューのサイズがデフォルト設定の1.0になってしまいます。

後半はほとんどおまじないです。
これは三次元空間上のオブジェクトをあつかうアプリケーションの設定になっています。



4. 新規にプログラムを開発したい場合

さて、このあとhello以外の名前で新規に自分のプログラムを開発したい場合について
若干説明します。

サンプルプログラムの実行ファイルhelloは、このディレクトリsample_c/にある
一つのソースコードhello.cをコンパイル、リンクすることで生成されます。
多くの場合、このパターンでそこそこ動くビューアが開発できます。

ただ、「おてがる」アプリはGUIやグラフィックスを用いるので、
自分が現在用いているプラットフォームに関する知識が必要となる部分が若干あります。
コンパイルするごとに、プラットフォームごとに異なる、かなりあやしげなライブラリ
オプションを指定するのはあまりよろしくないと思いますので、
プラットフォームのタイプごとにMakefileとコンパイルスクリプトを用意しました。

プログラミングの初心者がmakeを用いるのは若干荷が重いようなので、
まずは、コンパイルスクリプトをいじる、
あるいは、端末からそこに書いてあるような感じで打ち込むことをお薦めします。
ただ、より本格的なプログラム開発には遅かれ早かれmakeの利用が必須となりますので、
もし時間があれば、Makefileのほうも覗いてやってください。

で、まずはですが、もし、その新規作成されるプログラムを
このディレクトリsample_c/に置く場合には、ここで用意されたMakefileまたは
コンパイルスクリプトのhelloの部分だけをそのプログラムの名前に修正します。

たとえば、my_viewerという名前の実行ファイルを作成したい場合には、
まずmy_viewer.cという名前でソースコードを用意しておきます。
たいていの場合、hello.cをmy_viewer.cにコピーしてから、
これをテンプレートとして異なっている部分を修正するのが効率的です。
次に、Makefileまたはコンパイルスクリプトの中のhelloという文字列を
すべてmy_viewerに変更します。
これでこれまでと同様にコンパイルすればOKです。

次に、その新しいプログラムを置くディレクトリがこのディレクトリsample_c/で
ない場合には、それにあわせて以下のようにMakefileやコンパイルスクリプトを
修正する必要があります。

Makefileの場合は、以下の行を修正します。

AUTOGL_DIR = ../lib

コンパイルスクリプトでは、以下の部分を修正します。

-I../lib -L../lib

それぞれ、「おてがる」ライブラリ本体があるディレクトリlib/を参照しています
ので、ここを書き換えます。
デフォルトでは、このディレクトリsample_c/からみた相対ディレクトリ指定となるので、
../libとなっています。

なお、ここで-o、-I、-Lなどの意味を説明します。
これらは、コンパイラに指示するコンパイルまたはリンク時のオプションです。

まず、-oですが、これは実行ファイルの名前を指定します。
ここでは-o helloですので、実行ファイルの名前はLinuxではhello、
一方、Windows (Cygwin)ではhello.exeになります。

次に、-I、-L、それぞれ以下のような意味があります。

-I ： ヘッダファイル、インクルードファイルのあるディレクトリを指定する。
      「おてがる」の場合、autogl.hなどのヘッダファイルがlib/にあります。

-L ： ライブラリのアーカイブファイルのあるディレクトリを指定する。
      「おてがる」の場合、libautogl.aなどのアーカイブファイルがlib/にあります。
     
それと、-lオプションは、ライブラリのアーカイブファイルを指定するものです。
例えば、「おてがる」の場合、アーカイブファイルの名前はlibautogl.aなので、
そこから先頭のlibと末尾の.aをとった、-lautoglとなります。
-lm、-lX11、-lGLなども、同様です。
ただし、これらはシステムが管理するディレクトリ、
例えば/usr/libや/usr/X11R6/libなどにあります。

