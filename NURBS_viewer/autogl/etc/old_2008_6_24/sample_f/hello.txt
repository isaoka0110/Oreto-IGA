                サンプルプログラムhelloの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説
3.1. プログラムの全体構成について
3.2. プログラムの詳細について
4. 新規にプログラムを開発したい場合



1. 概要

サンプルプログラムhelloは、もっとも基本的な「おてがる」アプリの構成を
もったプログラムです。
わりとシンプルですが、普通のプログラムとは若干違った部分もありますので、
そこらへんをいろいろ紹介していこうと重います。

サンプルプログラムhelloのコンパイルのやり方やプログラムの実行の方法については、
READMEを参照してください。



2. プログラムの動作について

このプログラムは、起動するとビューウィンドウを開き、
そこにいくつかのオブジェクトを表示します。

そこに表示されるオブジェクトは、座標軸、三角形、直方体、そして文字列です。

座標軸の色は白です。
座標軸の描画は以下のように行なっています。
原点からそれぞれ(50, 0, 0)、(0, 50, 0)、(0, 0, 50)の３点に向けて線分を描画し、
さらに、原点に文字列"O"を、
各三点にそれぞれ文字列"X"、"Y"、"Z"を描画しています。

三角形の色は赤です。
三角形の３頂点はそれぞれ(-20, 0, 0)、(0, -20, 0)、(0, 0, -20)です。

直方体の色はシアン(つまり、水色。緑と青の混色)です。
原点に置かれたサイズ10、20、30の直方体です。
実際には、直方体の表面にあたる６枚の四辺形を描画しています。

文字列"Hello, world !"の色は黄色(赤と緑の混色)です。
ちょうど直方体の頂点にあたる座標(10, 20, 30)から描画しています。

オブジェクトの置かれている三次元空間領域をビューウィンドウにフィットするために、
ビューのサイズを70とし、
ビューの視点中心(注視点)を座標(10, 10, 10)、
そして、視線方向ベクトルを(1, 2, 3)としています。

このオブジェクトを、マウス操作により回転することができます。
また、メニューバーからPanelメニューのPanelアイテムを選択すれば、
Panelという名前のパネルウィンドウが表示されます。
この上にあるmodeチョイスボックスより移動、拡大縮小などのモードに
スイッチすることも可能です。

なお、このプログラムにはQuitボタンがついていないので、
これを起動した端末からCtrl-Cで終了して下さい。



3. ソースコードの解説

では、ソースコードhello.f本体の解説です。



3.1. プログラムの全体構成について

まず、プログラムの全体構成から。

見ていただいてわかる通り、「おてがる」アプリではメインルーチンから
autogl_mainサブルーチンをコールしています。
これをコールしたあとは、無限ループにはいって基本的にもどってきません。
これは、「おてがる」アプリがイベント駆動型のGUIアプリだからです。
ちなみに、autoglで始まるサブルーチンコールは、
「おてがる」ライブラリコールです。

そのすぐ下のほうにautogl_redrawという関数があります。
これは、再描画ルーチンであり、ビューウィンドウが再描画される必要があるたびに、
またマウスやキーボードからのイベントがあるたびに呼ばれるものです。

そうすると、単純な「おてがる」アプリの書き方は以下のようになります。

まず、メインルーチンでは、プログラムが起動してからすぐに行なうべき初期設定を
記述します。
「おてがる」アプリはイベント駆動型なので、いったん起動すると
半永久的にユーザーからのイベントを待ち続けます。
ファイルの入出力などはここの段階で行なっておくのが無難です。
あるいは、パネルウィンドウ上にユーザー定義のボタンを作成するという手も
ありますが、これはすこしだけ高度な話題になります。
詳しくは、more_sample_f/のサンプルプログラム、たとえばpanel.fなどを参照のこと。

次に、autoglredrawというサブルーチンを用意します。
ここでは、主に描画したいオブジェクトを「おてがる」の描画命令により指定します。
ファイル入出力や重い計算など、あまり計算時間のかかることは
ここでは避けたほうがよいです。

あと、以下のサブルーチンを用意しなければなりません。
ただし、これらの中は今は空でけっこうです。

autogl_handle_event
autogl_idle
autogl_callback

さらに注意ですが、より複雑なプログラムではFORTRANのcommon文の利用が
必須になります。
「おてがる」アプリでは、再描画やマウスイベント、あるいはボタンなどの
イベントに対応していくつかのコールバック用サブルーチンがコールされるのですが、
メインルーチンからこれらに渡すデータは基本的にコモンブロックになければ
ならないからです。
メインからこれらのコールバック用サブルーチンを直接コールしようとしても
ユーザーイベントには反応できないため、引数で情報を渡すことはできません。
common文を使用したことのない方は御注意下さい。

ちなみに、サンプルプログラムhello.fではメインから渡すデータが特にないので、
common文はでてきません。



3.2. プログラムの詳細について

次に、プログラムを上から順に眺めてみます。

まず、メインルーチンがあります。

ここでは「おてがる」およびアプリケーション全体に関する初期設定を
行ないます。

このサンプルプログラムのメインルーチンは、
主に３つのパートより構成されています。

最初のセクションでは、ビューイングパラメータの設定を行なっています。
このなかで、autogl_set_view_sizeは実用上最低限必要なコールです。
これをしないと、ビューのサイズがデフォルト設定の1.0になってしまいます。

次のセクションは、ほとんどおまじないです。
これは三次元空間上のオブジェクトをあつかうアプリケーションの設定になっています。

最後に、autogl_mainをコールします。
このあとプログラムの制御は「おてがる」に移ります。
もし、ビューが再描画されたり、ボタンやビューのイベントがあると、
それぞれ対応する別のサブルーチンがコールされます。
なんにせよ、メインルーチンには制御はもどってきません。

次にでてくるのは、サブルーチンautogl_redrawです。

これはビューが再描画されたりイベントが生まれるたびにコールされます。
サンプルプログラムhelloでは、座標軸、三角形、直方体、
そして文字列"Hello, world !"を順に描画しています。

autoglで始まるサブルーチンコールは、「おてがる」のライブラリコールです。
ここでは、以下のような「おてがる」の描画命令が用いられています。

autogl_set_color : 色を設定する。
autogl_draw_line : ２点を指定して、線分を描画する。
autogl_draw_triangle : ３点を指定して、三角形を描画する。
autogl_draw_quadrangle : ４点を指定して、四辺形を描画する。
autogl_draw_string : 開始点から、文字列を描画する。

「おてがる」では、基本的に点とは三次元の座標であり、
x、y、zの成分を指定します。

また、「おてがる」の色設定は、そのRed、Green、Blueの各成分(輝度)について
それぞれ0.0から1.0までの実数で指定します。
例えば、call autogl_set_color(1.0d0, 1.0d0, 0.0d0)は黄色になります。



4. 新規にプログラムを開発したい場合

さて、このあとhello以外の名前で新規に自分のプログラムを開発したい場合について
若干説明します。

サンプルプログラムの実行ファイルhelloは、このディレクトリsample_f/にある
一つのソースコードhello.fをコンパイル、リンクすることで生成されます。
多くの場合、このパターンでそこそこ動くビューアが開発できます。

ただ、「おてがる」アプリはGUIやグラフィックスを用いるので、
自分が現在用いているプラットフォームに関する知識が必要となる部分が若干あります。
コンパイルするごとに、プラットフォームごとに異なる、かなりあやしげなライブラリ
オプションを指定するのはあまりよろしくないと思いますので、
プラットフォームのタイプごとにMakefileとコンパイルスクリプトを用意しました。

プログラミングの初心者がmakeを用いるのは若干荷が重いようなので、
まずは、コンパイルスクリプトをいじる、
あるいは、端末からそこに書いてあるような感じで打ち込むことをお薦めします。
ただ、より本格的なプログラム開発には遅かれ早かれmakeの利用が必須となりますので、
もし時間があれば、Makefileのほうも覗いてやってください。

で、まずはですが、もし、その新規作成されるプログラムを
このディレクトリsample_f/に置く場合には、ここで用意されたMakefileまたは
コンパイルスクリプトのhelloの部分だけをそのプログラムの名前に修正します。

たとえば、my_viewerという名前の実行ファイルを作成したい場合には、
まずmy_viewer.fという名前でソースコードを用意しておきます。
たいていの場合、hello.fをmy_viewer.fにコピーしてから、
これをテンプレートとして異なっている部分を修正するのが効率的です。
次に、Makefileまたはコンパイルスクリプトの中のhelloという文字列を
すべてmy_viewerに変更します。
これでこれまでと同様にコンパイルすればOKです。

次に、その新しいプログラムを置くディレクトリがこのディレクトリsample_f/で
ない場合には、それにあわせて以下のようにMakefileやコンパイルスクリプトを
修正する必要があります。

Makefileの場合は、以下の行を修正します。

AUTOGL_DIR = ../lib

コンパイルスクリプトでは、以下の部分を修正します。

-L../lib

それぞれ、「おてがる」ライブラリ本体があるディレクトリlib/を参照しています
ので、ここを書き換えます。
デフォルトでは、このディレクトリsample_f/からみた相対ディレクトリ指定となるので、
../libとなっています。

なお、ここで-o、-Lなどの意味を説明します。
これらは、コンパイラに指示するコンパイルまたはリンク時のオプションです。

まず、-oですが、これは実行ファイルの名前を指定します。
ここでは-o helloですので、実行ファイルの名前はLinuxではhello、
一方、Windows (Cygwin)ではhello.exeになります。

次に、-Lには以下のような意味があります。

-L ： ライブラリのアーカイブファイルのあるディレクトリを指定する。
      「おてがる」の場合、libautoglf.aなどのアーカイブファイルがlib/にあります。
     
それと、-lオプションは、ライブラリのアーカイブファイルを指定するものです。
例えば、「おてがる」の場合、アーカイブファイルの名前はlibautoglf.aなので、
そこから先頭のlibと末尾の.aをとった、-lautoglfとなります。
-lm、-lX11、-lGLなども、同様です。
ただし、これらはシステムが管理するディレクトリ、
例えば/usr/libや/usr/X11R6/libなどにあります。

