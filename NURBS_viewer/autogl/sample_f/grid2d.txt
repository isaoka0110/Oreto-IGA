                サンプルプログラムgrid2dの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* 二次元の差分法向け可視化ビューア
* 複数のパネルを有する「おてがる」アプリ
* パネルを有するアプリにおける、ディスプレイリストの扱い

このサンプルプログラムで紹介されている「おてがる」API

autogl_add_group
  グループを「おてがる」に登録する。
  GUI上では、新しいパネルが作成される。



1. 概要

サンプルプログラムgrid2dでは、
二次元差分格子上のスカラー場を可視化するビューアを実装しています。



2. プログラムの動作について

このプログラムは、二次元スカラー場のビューアです。
差分格子表示、コンター表示および三次元グラフ表示ができます。

パネルには、grid、contourおよび3-D graphの３つのトグルがあります。
それぞれにチェックをつけると、対応するプロットが表示されます。

grid : 格子
contour : コンター
3-D graph : 三次元グラフ

コンター表示形式の種類としては、
スムーズコンター、線コンター、バンドコンターの３つから選択できます。
また、コンタープロットを制御するためのパラメータが３つ、
min、maxおよびnum. gradesです。
それぞれ、コンターの最小値、最大値、バンドの数となります。
なお、バンド数は線コンターとバンドコンターの場合だけ有効です。

三次元グラフについては、z_scaleはその高さ方向のスケールをあらわします。

基本的には、これらのコントロールをいじったあとで、
パネルの一番下にあるUpdateModelボタンを押すと、
ビューが更新されます。
ビューをマウスでドラッグしただけでは、
パネルでの設定変更は有効にならないので御注意下さい。



3. ソースコードの解説

ソースコードgrid2d.fを上から眺めていきます。

このプログラムは、
サンプルプログラムのmore_sample_f/contour.f、line_contour.f、
band_contour.fおよびgraph3d.fの機能をマージし、
これにGUIをつけてビューアっぽくしてみたものです。
GUIについては、サンプルプログラムのmore_sample_c/panel.fを参照。

いくつか注意点があります。

まず、複数のパネルを作成する方法がでてきます。
メインルーチンの中で、
autogl_add_groupは「おてがる」にグループを登録します。
ここから、次のグループ登録までの間に登録されたすべての制御変数および
コールバックは、そのグループに所属します。
GUI上では、これらの制御変数やコールバックを載せてグループごとに
パネルが一つ用意されます。
パネルを複数用意したい場合には、
制御変数やコールバックの登録を適当にグループ分けし、
そして各グループの先頭でautogl_add_groupをコールすればいいわけです。

それと、ディスプレイリストを用いる場合における注意点です。
再描画コールバックautogl_redrawでは、
すでに作成されたディスプレイリストを描画しているだけなので、
パネルを操作して制御変数の値を書き換えたとしても、
再描画するだけではそれは反映されません。
ビュー上でマウスをクリックあるいはドラッグしても、
ビューイングパラメータが変更されたあとで、
再描画コールバックが呼ばれるだけです。
ということで、パネルでの設定変更をビューに反映するには、
ボタンUpdateModelに対応するサブルーチンupdate_buttonにより
現在の制御変数の値を参照して
ディスプレイリストを作りなおす必要があります。
