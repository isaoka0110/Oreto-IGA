                サンプルプログラムpanelの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* パネルを有する「おてがる」アプリ
* パネル上の各種GUIコントロール(ウィジェット)
* 「おてがる」の制御変数
* 「おてがる」のコールバック
* ビューウィンドウ上のある決まった場所に描画する方法

このサンプルプログラムで紹介されている「おてがる」コールバックサブルーチン

autogl_callback
  「おてがる」のイベント処理コールバックサブルーチン。
  ユーザープログラム側にこの名前で必ず一つだけ存在しなければならない。

このサンプルプログラムで紹介されている「おてがる」API

autogl_set_default_callback_in_mode3d
  ビューウィンドウのイベント処理を三次元アプリケーション用に指定する。
autogl_enable_drag_in_mode3d
  マウスドラッグ中の再描画を有効にする。
autogl_set_panel_in_mode3d
  三次元アプリケーションとして、modeチョイスを作成する。
autogl_add_comment
  コメントを「おてがる」に登録する。
  ラベルを生成する。
autogl_add_boolean
  論理値の制御変数を「おてがる」に登録する。
  トグルを生成する。
autogl_add_integer
  整数の制御変数を「おてがる」に登録する。
  テキストフィールドまたはチョイスを生成する。
autogl_add_real
  実数の制御変数を「おてがる」に登録する。
  テキストフィールドを生成する。
autogl_set_label
  コントロールのラベル文字列を設定する。
autogl_add_integer_item
  チョイスにアイテムを追加する。
autogl_add_callback
  コールバックを「おてがる」に登録する。
autogl_draw_string_at_scaled_position
 ビューウィンドウ上の指定位置に文字列を表示する。
autogl_draw_view
  再描画コールバックを強制的にコールする。



1. 概要

本サンプルプログラムは、「おてがる」アプリのGUIのデモです。

多くの「おてがる」アプリケーションは、基本構成として、
一つのビューウィンドウおよび、一つまたは複数個のパネルウィンドウから
成り立ちます。
すべてのパネルウィンドウはデフォルトではビューウィンドウの
メニューバーに収納してあります。
メニューバーのPanelメニューをプルダウンすると、
その「おてがる」アプリに存在するパネルのリストがでてきます。
これらはトグルスイッチになっているので、
どれかを選べばそのパネルウィンドウが表にあらわれ、
もう一度それを選べば、今度はスクリーンから隠れます。
通常、スクリーンの広さは有限なので、
そのとき必要となるパネルだけを表に出して使い、
いらなくなったら隠すようにします。

なお、このサンプルプログラムは、ビューが一つでパネルが一つだけの
「おてがる」アプリです。
複数のパネルを作成したい場合は、
他のサンプルプログラムのmore_sample_f/grid2d.fまたはgrid3d.fを参照。

パネルウィンドウの上に置かれるGUI部品(コントロールあるいはウィジェットとも
呼ばれる)としては、ラベル、ボタン、チョイス(ラジオボタン)、
トグル(チェックボックス)、そして、テキストフィールドがあります。
通常これだけのGUIコンポーネントがあれば、
ビューアやエディタとして十分なアプリケーションが作れます。



2. プログラムの動作について

このプログラムは、起動するとビューウィンドウを開き、
そこにいくつかのオブジェクトを表示します。

まず、画面の中心には、座標軸および、
各辺がさまざまな色でぬられた直方体の箱が表示されています。
原点のあたりから、'Hello, world !'という文字列が表示されています。
また、直方体の、原点と反対側の頂点には、'Number:20'が表示され、
さらに、画面の左下隅には'Value = 0.5'があります。

これをマウスでドラッグし、回転することができます。
回転すると、原点の'Hello, world !'および
直方体の頂点で表示されている文字列'Number:XXXX'の位置は移動しますが、
画面左下隅のもの'Value = XX.XX'は移動せず、
そこにはりついたままです。

とりあえずここで終了しないでください。
ここからが本番です。

このサンプルプログラムにはパネルが一つだけ存在し、
その名前はPanelとなっています。
ビューウィンドウのメニューバーからPanelメニューをプルダウンすると、
Panelというアイテムが一つだけでてきます。
これを選択すると、
今度はPanelという名前のウィンドウがあらわれます。
これが先ほど説明したパネルウィンドウです。

このパネルウィンドウには、これまでにも出てきたmodeチョイスボックスの他に、
いくつかのGUIコントロール(ウィジェット)が登場しています。
上から順に、modeチョイスボックス(ラジオボタン)、
numberテキストフィールド、valueテキストフィールド、
show axisトグルボタン(チェックボックス)、
shapeチョイスボックス、およびDrawボタンとPrintボタンというふうに
並んでいます。
origin_labelには'Hello, world !'、numberには20、valueには0.5が
それぞれはいっています。
show axisにはチェックがついていて、
またshapeの値はboxになっています。

numberをクリックしてそこに別の数字を入力し、その後でDrawボタンを押すと、
ビューの'number:20"だったところが現在入力した数字に置き代わります。
valueも同様です。
なお、numberには整数を、
valueには数字(整数または実数)だけをそれぞれ入れて下さい。
show axisのチェックをはずすと座標軸が表示されなくなります。
チェックを付けると元にもどります。
shapeをboxからlineにすると、画面の表示が直方体の枠線だけ、
つまりワイヤーフレーム表示になります。
また、triangleにすると、原点に３枚の三角形が表示されます。
どの場合も、パネルウィンドウ上のコントロール(ウィジェット)を変更したあと、
いったんDrawボタンを押して下さい。
あるいは、Drawボタンを押さずに、そのかわり、
なんらかのマウスオペレーションをビューウィンドウで行なえば、
その場で画面が更新されます。

一方、Printボタンを押してみてください。
端末のほうに、以下のようなメッセージが何行か表示されます。

 PRINT
  origin_label is 
 hello, world !
  axis_is_shown is  1
  shape is SHAPE_BOX (2)
  number is  20
  value is   0.5

上は例です。パネルウィンドウ上でのこれまでの操作により、
いくぶん異なったものが表示されると思います。
これらは、現在の時点でのパネル上の各コントロールの値を示しています。
いろいろとコントロールの値を変更し、Printボタンを押してみましょう。

あと、ついでですが、上記のメッセージを覚えておいて下さい。
ソースコードの説明のところで、何度かまたこれがでてきます。

あと、このサンプルプログラムも同様に、Ctrl-Cで終了します。
(まあ、せっかくのGUIアプリなんですから、
Quitボタンを用意すればいいわけなんですが...)



3. ソースコードの解説

サンプルプログラムのソースコードpanel.fを上から順に眺めてみます。

最初はメインルーチンです。

コモンブロックにいくつかグローバル変数の値がでてきます。
順に、浮動小数点変数のvalue、文字列origin_label、
整数変数aixs_is_shown、shape、numberです。
整数変数aixs_is_shownは、プログラム内では0または1の値しかとりません。
つまり、TRUEかFALSEの論理値変数として使われています。
一方、同じく整数変数shapeには、3つの値、
0 (SHAPE_LINE)、1 (SHAPE_TRIANGLE)、2 (SHAPE_BOX)のどれかが設定されます。
あと、最後の整数変数numberには、一般の数が入ります。

感のよいかたはもう気がつかれたと思います。
これらは、Printボタンを押したときにでてくるメッセージと直接対応します。
というより、これらは、origin_labelを除いて、
パネルウィンドウ中の各コントロールのラベルとほぼ一対一に対応します。
「おてがる」では、これらを制御変数と呼んでいます。
制御変数は通常、グローバル変数である必要があります。
また、各制御変数は、文字列、integer、あるいはreal*8のどれかである
必要があります。
整数変数については、一般の整数として、
あるいは、論理値(0か1)や列挙型(0から始まる数個)としてあつかわれます。

このあと、「おてがる」の初期化を行います。
先頭のセクションでは、上記の「おてがる」の制御変数群を
適当な値で初期化しています。
これらの値は、このサンプルプログラムを起動したときに最初に表示されるものに
対応します。

次に、これまでと同様にビューイングパラメータや各種設定を行います。
ここでは、これまでおまじないとしてあつかっていたいつくかのAPIについて
説明します。

autogl_set_default_callback_in_mode3dは、ビューウィンドウの
マウスやキーボードに関するイベント処理を三次元アプリ用に指定します。

autogl_enable_drag_in_mode3dは、マウスドラッグ時の再描画コールバックの
呼出を有効にします。
レンダリングが十分高速であれば、マウスの動きにしたがってスムーズに
オブジェクトが変化します。
一方、レンダリングが重いときには、これを有効にしないほうがいいでしょう。

そのあとは、パネルウィンドウのコントロールを準備するセクションです。
ここからは、「おてがる」のGUIに関するAPIが続きます。

まず、autogl_set_panel_in_mode3dです。
この「おてがる」APIはこれまでもたびたび出てきていましたが、
今回ようやく説明できるようになりました。
これは、パネルウィンドウに三次元アプリケーションとしての
modeチョイスボックスを表示します。
三次元アプリでは、移動、二種類の回転、拡大縮小および、その他(Other)の
モードが使えます。

次は、autogl_add_commentです。
これにより、パネルウィンドウ上にラベルコントロールが作成されます。
この段階では、ラベルコントロールのラベル文字列は空文字なので、
このままだとパネルウィンドウに空行があらわれます。
続いて、autogl_set_labelにより、
ラベル文字列が'Model Parameters'に設定されます。

その次は、autogl_add_integerです。
これは、整数型の制御変数を「おてがる」に登録します。
引数は、integer変数、および、制御変数の名前をあらわす文字列です。
これを用いて、制御変数numberを「おてがる」に登録します。
この制御変数numberのプログラム側での変数名である'number'を指定しています。
これは、パネル上にテキストフィールドを作成します。
ここには、整数値しか入力できません。
入力された値により、制御変数numberの値が上書きされます。

ちなみに、制御変数の名前については、アルファベットおよび数字の組合せであれば
なんでもかまいません。
ふつうは、FORTRANでの変数名と同じものを指定するほうが、
プログラムのメンテナンス上楽になります。
また、この名前はパネルウィンドウ上において、
各コントロールのラベルとしてでてきます。
この名前が気にいらないときには、別途autogl_set_labelにより
ラベルとなる文字列を指定することができます。

さらに、autogl_add_realです。
これは、浮動小数点型の制御変数を「おてがる」に登録します。
引数は、real*8変数、および、制御変数の名前をあらわす文字列です。
これを用いて、制御変数valueを「おてがる」に登録します。
これもまた、パネル上にテキストフィールドを作成します。
ここには、整数または小数値しか入力できません。
入力された値により、制御変数valueの値が上書きされます。

このあとは、autogl_add_booleanです。
これは、論理値型の制御変数を「おてがる」に登録します。
引数は、integer変数、および、制御変数の名前をあらわす文字列です。
これを用いて、制御変数axis_is_shownを「おてがる」に登録します。
整数変数axis_is_shownはここでは論理値変数として用いているので、
0または1どちらかの値が有効です。
これは、パネル上にトグルボタン(チェックボックス)を作成します。
なお、ここでは、プログラムでの名前axis_is_hownは、
GUI上では読みにくいということで、
autogl_set_labelにより"show axis"と特別にラベルを設定しています。
チェックがついていれば、制御変数axis_is_shownの値は1となり、
なければ0に設定されます。

続いて、autogl_add_integerがまたでてきます。
こんどは、整数変数を列挙型の制御変数として「おてがる」に登録しています。
この「おてがる」コールにつづいて、autogl_add_integer_itemがいくつか登場します。
整数変数shapeは、このサンプルプログラムでは0、1、2の値だけをとる
列挙型としてあつかわれています。
これに対応するように、パネルウィンドウ上にはチョイスボックスおよび
その中に3つのラジオボタンが作成されます。
チョイスボックスのラベルは'shape'で、3つのラジオボタンのラベルは順に
'line'、'triangle'、'box'となり、これらはそれぞれ0、1、2に対応します。
これらのうち、現在選択されているラジオボタンに対応する0、1、2のどれかの値が
制御変数shapeに設定されます。

最後に、2つのコールバック、PrintとDrawが
「おてがる」に登録されています。
autogl_add_callbackは、コールバックを「おてがる」に登録します。
引数は、コールバックサブルーチンのIDと、
コールバックの名前をあらわす文字列です。
これにより、ボタンが作成されます。
このボタンを押すと、対応する整数IDを引数に
コールバックサブルーチンautogl_callbackがコールされます。

次は、再描画コールバックautogl_redrawです。
「おてがる」の制御変数の値にしたがって、
ビューに表示されるオブジェクトを描画しています。
順に、詳しく見ていきます。

axis_is_shownは座標軸を表示するかどうかを決定しています。
これが1なら、座標軸が描画され、一方0なら、なにもおこりません。

shapeはどのような形を実際に描画するかを決めています。
0、1、2の3ケースがあります。
0 (SHAPE_LINE)のときは、直方体の12本の稜線を描画し、
ワイヤーフレーム表示を行います。
1 (SHAPE_TRIANGLE)のときは、3枚の三角形を描画します。
2 (SHAPE_BOX)のときは、直方体をソリッド表示します。
直方体の各面は、それぞれ異なった色で塗りつぶされています。

そのあと、直方体の原点と反対側にある頂点(10, 20, 30)から
numberの値を文字列として描画しています。

最後に、画面の左下隅にvalueの値を描画します。
autogl_draw_string_at_scaled_positionは、
ビューウィンドウ上の指定位置に文字列を表示します。
このとき、位置は左下隅から図った比率で指定します。
左下が(0.0, 0.0)、右上が(1.0, 1.0)となります。
ワールド座標ではなく、画面での相対位置で指定できるため、
なんらかの情報を画面に固定して表示するのに便利です。

サブルーチンdraw_buttonは、Drawボタンを押すと実行されます。
これはコールバックサブルーチンautogl_callbackから、
その引数idが0のときに呼ばれます。
ここにあるautogl_draw_viewは、上記の再描画コールバックautogl_redrawを
強制的にコールするものです。

次のサブルーチンprint_buttonは、Printボタンを押した際に実行されます。
これもまたコールバックサブルーチンautogl_callbackから、
その引数idが1のときに呼ばれます。
Printとはいっても、単にこのサンプルプログラムにあるすべての「おてがる」の
制御変数を表示しているだけですが。
なお、制御変数がコモンブロックを通じて渡されていることに御注意下さい。

