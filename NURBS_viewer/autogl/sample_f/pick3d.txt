                サンプルプログラムpick3dの解説

目次

1. 概要
2. プログラムの動作について
3. ソースコードの解説

このサンプルプログラムのポイント

* 三次元イベント処理
* 三次元の点をピックする方法

このサンプルプログラムで紹介されている「おてがる」コールバックサブルーチン

autogl_handle_event
  「おてがる」のイベント処理コールバックサブルーチン。
  ユーザープログラム側にこの名前で必ず一つだけ存在しなければならない。

このサンプルプログラムで紹介されている「おてがる」API

autogl_draw_diamond_mark3d
  ダイアモンドマークを描画する。
autogl_get_view_event
  イベントの種類を調べる。
autogl_pointing_device_is_hit3d
  指定のワールド座標のそばでマウスピックがおきたかどうかを調べる。
autogl_draw_view
  再描画コールバックを強制的にコールする。
autogl_handle_default_key_event_in_mode3d
  三次元アプリケーション用にデフォルトキーボードイベント処理を行なう。
autogl_set_default_callback_in_mode3d
  ビューウィンドウのイベント処理を三次元アプリケーション用に指定する。
autogl_set_mode3d
  ビューウィンドウの初期状態でのモードを設定する。



1. 概要

サンプルプログラムpick3dでは、「おてがる」三次元ユーティリティの
三次元イベント処理機能を紹介しています。

「おてがる」三次元ユーティリティは、三次元アプリケーションのための
一般的なユーティリティ機能を実装しています。
このサンプルプログラムは、このうち、三次元アプリケーション用の
マウスやキーボードからのイベント処理について説明しています。

詳しくは、マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
三次元ユーティリティのセクションを御覧下さい。

また、ビューでのイベント処理一般については、以下も関係します。
マニュアルのAPIリファレンスmanual/api_reference.txtのうち、
グラフィックスのセクションを御覧下さい。



2. プログラムの動作について

このプログラムは、起動すると三次元のオブジェクトを表示します。

画面には、直方体が表示されており、
さらにその８つの頂点には、赤いダイヤモンドのマークがついています。

ここで、その赤いマークのどれかをマウスの左ボタンでクリックしてみましょう。
それが選択されてダイアモンドが塗りつぶされ、
一方、端末にはメッセージが表示されます。
メッセージから、選択された頂点の番号(１から開始される)が分かります。
別のマークを選択すれば、これまで選択されていたものはクリアされます。
その他の部分を選択しようとすれば、すべての選択が解除されます。

また、このサンプルプログラムは三次元アプリケーションなので、
メニューバーからPanelを表示し、移動や回転、拡大縮小ができます。
modeチョイスのモードをその他(Other)にすると、
マウスによる頂点の選択ができるようになります。



3. ソースコードの解説

ソースコードpick3d.fを上から眺めていきます。

まず、メインルーチンです。

コモンブロックですが、
最初の変数vertexsは直方体を構成する各頂点の三次元座標を表します。

次の変数selected_vertex_idは、
現在選択されている頂点の番号を記録しています。
選択されていれば、1から8までの整数のどれかをとり、
また、なにも選択されていなければ、-1となります。

「おてがる」APIのautogl_set_default_callback_in_mode3dにより、
イベント処理を三次元アプリケーション向けに設定し、
マウスによる移動や拡大縮小ができるようにします。

「おてがる」APIのautogl_set_mode3dにより、
初期状態でのモードをその他(Other = 0)にしています。

ちなみに、三次元アプリケーション設定では、
ビュー上でキーボード入力すると以下のようにモードが切りかわります。

Oまたはoキー : Other             その他        0
Tまたはtキー : Translate         移動          1
Rまたはrキー : Rotate            回転          2
Uまたはuキー : rotate Up vector  上方向の回転  3
Sまたはsキー : Scale             拡大縮小      4

そろそろモード切替えのマウス操作がウザくなってきたころでしょうから、
活用してみてください。

再描画コールバックautogl_redrawでは、三次元空間の座標軸を描画し、
続いて直方体を描画します。
さらに、doループで各頂点をまわり、
autogl_draw_diamond_mark3dという「おてがる」APIにより
ダイアモンドマークを描画します。
これは、三次元ユーティリティのひとつです。
ここで、もしその頂点が選択されていれば、マークを塗りつぶします。

このあと出てくるサブルーチンautogl_handle_eventは、
イベント処理のためのコールバックです。
このサンプルプログラムにおいてイベント処理コールバックautogl_handle_eventは、
ビューへのマウスやキーボードアクションが生じるたびにコールされます。

ここでは、まず、autogl_get_view_eventコールによりイベントの種類を得ています。
以下のようなイベントがあります。

0 : マウスボタンが押された。
1 : マウスがドラッグされた。
2 : マウスボタンが離された。
3 : キーボードのキーが押された。

マウスクリックに対応してなにかしたいのなら、
ポインティングデバイスであるマウスのボタンがリリースしたタイミングで、
このコールバックの中でそれを行います。
このサンプルプログラムでは、どれかの頂点のそばでマウスクリックがあったか
どうかを調べます。
もしあれば、その頂点を選択し、
選択したタイミングで端末にメッセージを表示します。
一方、なにも選択されなければ、selected_vertex_idには-1が入っているはずです。

ここで、「おてがる」APIのautogl_pointing_device_is_hit3dは、
指定した座標のそばでマウスイベントが起きたかどうかをチェックします。
引数は、深さ情報をあらわすパラメータ、
ワールド座標系におけるx、y、z座標、
および、ピックのトレランスをデバイス座標系でのピクセル数で指定します。
なお、一番目のパラメータは今回は使いません。

なんにせよ、なんらかの変化があれば、ビューを再描画するため、
autogl_draw_viewをコールします。

あと、なんらかのキーボードイベントが生じたときには、
「おてがる」三次元アプリケーションとしてのデフォルト処理
autogl_handle_default_key_event_in_mode3dを実行します。

