           Ver.0.2以前の古いバージョンのユーザー向けの注意点



本バージョン0.2では、主に以下の機能が追加更新されています。

* OpenGL使用時におけるレンダリングの高速化

* ステレオ立体視版(「おてがる」MMX)の統合と強化

* 並列版(「おてがる」-MP)の統合と強化

* Web版(「おてがる」.edu)の統合と強化

* オフラインレンダリング版(「おてがる」OS-X)の統合と強化

* 高レベル可視化APIの追加

* FORTRANバインディングの強化

* プチ「おてがる」の追加

* その他

また、更新にともない、いくらかの後方互換性が失なわれています。
以下のポイントにひっかかる方は、御注意下さい。

* OpenGLをダイレクトにコールしているコード

* FORTRANユーザー

同様に、「おてがる」本体(ユーティリティ部含む)を変更して使っていた方は、
アップグレードに伴い、かつて変更した部分を再度新しいものに
反映する必要があるでしょう。
ただ、今回のアップグレードにより正式にサポートされた機能が
いくつかありますので、まずはそれをチェックしてみてください。
詳しくは、9) その他のセクションを御覧下さい。






1. 新規機能、更新点について



1) OpenGL使用時におけるレンダリングの高速化

いくつかの方法により、OpenGLを用いたレンダリングが高速化されました。

1-1) 大規模モデル使用時のディスプレイリストの改良

ディスプレイリストを用いると、そのサイズの大小にかかわらずレンダリングが
高速化されます。

「おてがる」の一般的な描画APIを用いる場合、これらのAPIを呼び出す際に
いくらかのCPU負荷がかかるだけでなく、「おてがる」内部でOpenGLや
ハードウェアに渡すための追加パラメータの計算が必要になったりするため、
OpenGLをダイレクトにコールする場合に比べて描画速度が遅くなりがちです。
場合によっては速度が1/10、1/100まで低下することもありえます。

ディスプレイリストを用いると、上記の負荷をディスプレイリスト作成時に
一度だけ我慢すれば、レンダリング時にはOpenGLを直接呼び出すのと
ほとんど変わらない程度の速度が得られます。
ポリゴンの色や頂点座標など、レンダリング対象の情報自体は変化せず、
視線方向や拡大率などのビューイングパラメータだけが頻繁に変化する場合に
有効です。
逆に、レンダリング対象が頻繁かつ広範に編集される場合には、
ディスプレイリストはあまり効果的ではありません。

ただ、これまでの実装ではOpenGLのディスプレイリストをそのまま用いていたため、
大規模モデルのレンダリングの際に非常に多くのポリゴンを用いると
逆に動作が異常に遅くなるといった症状がありました。
本バージョンではこの問題を独自実装に置き換えることにより解消しています。

利用されるプラットフォームやハードウェアでの実際の描画パフォーマンスに
関しては、more_sample_c/のheavy.cを実行してみて下さい。
このプログラムでは、まず始めにディスプレイリストに200万個の三角形を収納し、
ビューの再描画ごとにこのディスプレイリストを描画しています。
わりと最近の機種においては、一秒間に数百万個程度のポリゴンが描画できる
ようです。

1-2) 低レベル描画API

さらに、ディスプレイリストに頼らずに、レンダリング速度と編集速度との
バランスを独自に細かく制御したい場合に備えて、
低レベル描画APIを用意しました。
これらの関数群は、以下のように、従来の「おてがる」の描画命令の名前の後ろに
2を加えたものとなっています。

        AutoGL_SetColor2
        AutoGL_DrawLine2 
        AutoGL_DrawTriangle2
        AutoGL_DrawColorInterpolatedTriangle2
        AutoGL_DrawNormalInterpolatedTriangle2
        AutoGL_DrawString2
        AutoGL_SetSelectionId2

これらの中には、色のコンポーネントや法線方向ベクトルなど、
いくつか追加引数が必要とされるものもあります。
また、実数の型はdoubleでなくfloatとなっていますので御注意を。

それと、AutoGL_SetTwoSideFaceFlag / AutoGL_GetTwoSideFaceFlag 関数は
描画時にポリゴンの裏と表を両方描画するかどうかを指定します。
裏表、つまり法線ベクトルの方向がはじめから分かっている場合には、
このAPIで表だけを描画させたほうが高速です。

これらの新規APIの使い方については、more_sample_c/のheavy_fast.cを
御覧下さい。

1-3) マクロと座標変換

これ以外にも、特殊なケースの描画速度を高速化するためのAPIが
試験的に実装されています。主に、マクロと座標変換のAPIです。

      AutoGL_OpenMacro
      AutoGL_CloseMacro
      AutoGL_DrawMacro
      AutoGL_PushMatrix
      AutoGL_PopMatrix
      AutoGL_Translate
      AutoGL_Rotate
      AutoGL_Scale 

詳しくは、core/test/以下のサンプルプログラムを御覧下さい。
ただし、このAPIはまだ実験段階なので、
最終リリース時には変更されるかもしれません。



2) ステレオ立体視版(「おてがる」MMX)の統合と強化

プロジェクタ２台を用いたステレオ立体視が可能になりました。
詳しくは、マニュアルを御覧ください。
これは、core/autogl_mmx/manual/にあります。

なおこれは、従来より内部公開していた「おてがる」MMXを「おてがる」本体に
統合したものです。
旧「おてがる」MMXとの変更点は以下のとおりです。

* Synchronizeボタンがなくなり、そのかわり、10秒後に自動的に同期します。

* ビューウィンドウサイズを変更するには、ユーザーのプログラムを変更して
AutoGL_SetUpにおいてAutoGL_ResizeViewコールによりサイズを指定するか、
または、同期するまでの10秒間以内に、
スレーブ側のビューウィンドウのサイズをマウスで変更します。
同期した後、マスター側をスレーブにあわせればOKです。

このあたりは実はあんま自信がないもんで、ええと、不評なら元にもどそうと思います。



3) 並列版(「おてがる」-MP)の統合と強化

レンダリング処理の並列化が可能になりました。

スーパーコンピュータやPCクラスタ上で大規模なモデルを可視化する際に有効です。
グラフィックスカードがない並列計算機では、オフラインレンダリングを
行ないます。
一方、PCクラスタの各ノードにグラフィックスカードが装着されている場合には、
そちらを使用することができます。

詳しくは、マニュアルを御覧ください。
これは、core/autogl_mp/manual/にあります。

なおこれは、従来より内部公開していた「おてがる」-MPを「おてがる」本体に
統合したものです。
旧「おてがる」-MPとの変更点は以下のとおりです。

* 画像データをマスターに転送するさいに、圧縮をしないようにしました。
  GbEかそれ以上の通信速度を持つネットワークでは、圧縮しないほうが
  速くなるようです。

* オフラインレンダリング(「おてがる」OS-X)の場合も並列化できます。
  グラのしょぼい大規模PCクラスタや、並列スパコンとかで使えそうです。



4) Web版(「おてがる」.edu)の統合と強化

「おてがる」アプリをWebブラウザや携帯電話から使えるようになりました。

これは、「おてがる」アプリケーションをサーバーとクライアントに分割します。
サーバ側プロセスはWebサーバあるいはリモートログイン(SSH)サーバ上で動作します。
一方、クライアント側はユーザーのすぐそばの環境、たとえばWebブラウザや
携帯電話などで動作します。これらがHTTPあるいはSSHなどで通信しながら、
対話的にリモートの計算環境を使うことができるようになります。

詳しくは、マニュアルを御覧ください。
これは、core/autogl.edu/manual/にあります。

なおこれは、従来より内部公開していた「おてがる」.eduを「おてがる」本体に
統合したものです。
旧「おてがる」.eduとの変更点は以下のとおりです。

* セキュリティホールをいくつか取り除きました。
  いちおう、けっこうやったつもりですが、まだ残っているかもしれません。

* イメージをGIFからJPEGに変更しました。

* Webブラウザ用には、HTML + JavaScriptに加えて、Javaアプレット版も用意しました。

* NTT DoCoMoのiモード携帯端末向けのクライアントを用意しました。



5) オフラインレンダリング版(「おてがる」OS-X)の統合と強化

「おてがる」アプリがグラフィックスカードがないマシンやOpenGLが使えない環境
(スパコンとか)でも使えるようになりました。

詳しくは、マニュアルを御覧ください。
これは、core/autogl_osx/manual/にあります。

なおこれは、前の内部リリースですでに追加されていた機能を強化したものです。
この部分は、内部的に「おてがる」OS-X (Off Screen eXtension)と呼ばれていました。
旧「おてがる」OS-Xとの変更点は以下のとおりです。

* OpenGL版でしか動作しなかったいくつかのAPIを実装し、またバグを修正しました。
  半透明とテクスチャ以外は、だいたい動作するようです。

* valueコマンドを追加し、infoコマンドの機能をinfoとvalueとに分割しました。

* clickおよびdragコマンドによりビューウィンドウでのマウス動作が
  コマンドラインから再現できるようになりました。

* keyコマンドによりビューウィンドウへのキーボード動作が
  コマンドラインから再現できるようになりました。

* 画像のサイズがresizeコマンドで変更できるようになりました。

* バッチ形式のレンダリングプロセスとして動作するように、
  コールバックを追加しました。コールバック関数を引数にして、
  AutoGL_SetBatchProcessCallback をコールします。
  このコールバック関数はAutoGL_SetUpの直後に呼ばれ、
  その後はコマンドプロンプトを表示せずにそのまま終了します。

* 「おてがる」MPにより、並列化も可能です。

* AutoGL_SetImageFileName でイメージファイル名を指定できます。
  デフォルトは"result.ppm"です。



6) 高レベル可視化APIの追加

6-1) スムーズコンター、線コンター、等値面、断面コンター

従来の可視化APIに加えて、以下のAPIを追加しました。
こちらのほうが高レベルなので使いやすいと思います。

    AutoGL_DrawSmoothContourTriangle
    AutoGL_DrawLineContourTriangle
    AutoGL_DrawSmoothContourQuadrangle
    AutoGL_DrawLineContourQuadrangle
    AutoGL_DrawIsosurfaceTetrahedron
    AutoGL_DrawSectionSmoothContourTetrahedron
    AutoGL_DrawSectionLineContourTetrahedron
    AutoGL_DrawIsosurfaceHexahedron
    AutoGL_DrawSectionSmoothContourHexahedron
    AutoGL_DrawSectionLineContourHexahedron

なお、これにあわせて、サンプルプログラムのisosurface.c, section.cなども
変更されています。

6-2) バンドコンター

これまでのスムーズコンター、線コンターに加えて、
バンドコンター表示機能が追加されました。

  AutoGL_DrawBandContourTriangle 
  AutoGL_DrawBandContourQuadrangle 
  AutoGL_DrawSectionBandContourTetrahedron
  AutoGL_DrawSectionBandContourHexahedron

これに対応するコンターバー表示は以下のものになります。

  AutoGL_DrawBandContourMap 

6-3) コンターのカラーテーブルのカスタマイズ

これまでは、コンター表示でのグレード値からRGB三色への変換は、
虹色のパターンということで
青->水色->緑->黄色->赤->紫という１パターンだけが用意されていましたが、
以下の「おてがる」コールによりこれをカスタマイズできるようになりました。

  AutoGL_ClearContourColor      : カラーテーブルを初期化する
  AutoGL_AddContourColorOfGrade : カラーテーブルに色を追加する

また、いくつかの設定が追加されています。

  AutoGL_SetGrayScaleContourMap : 黒->白
  AutoGL_SetContourMap_BCGYRM   : 青->水色->緑->黄->赤->紫 (デフォルト)
  AutoGL_SetContourMap_MBCGYR   : 紫->青->水色->緑->黄->赤
  AutoGL_SetContourMap_BCGYR    : 青->水色->緑->黄->赤

詳しくは、可視化ユーティリティ、コンターのセクションを参照。



7) FORTRANバインディングの強化

FORTRANユーザー向けに、APIやサンプルプログラムを整備しました。
主な変更点は以下のとおりです。

* sample_f/にhello.fを置きました。
  前にあったtetra.fはmore_sample_f/に移りました。

* more_sample_f/を追加しました。
  Cのサンプルプログラム群とほぼ同等の機能を実装しています。

* g77を用いて、cygwinでも動作するようになりました。

なお、コンパイル時には、lib/autogl_os.hを編集して下さい。
詳しくは、INSTALLを参照。



8) プチ「おてがる」の追加

現在の「おてがる」がいろいろな機能を追加されて複雑になるに従い、
ライブラリ本体もとうとう一万行を越えてしまいました。
そこで、主に学習用として、昔の「おてがる」のようなシンプルなものが
必要であると考え、プチ「おてがる」を用意しました。
単純のため、Linux版のみを用意してあります。

詳しくは、hetare/以下を御覧下さい。
マニュアルとかは特にないので、ソースコードを直接見てやって下さい。



9) その他

* パネルをメニューバーに収納
* キーボードショートカット
* 矢印の表示
* 透明度の変更
* ビューサイズの変更
* 「おてがる」終了コール

9-1) パネルをメニューバーに収納

ビューウィンドウにメニューバーが加わりました。
各パネルウィンドウの開閉がメニューから制御できます。
常時作業に必要なパネルだけを表示させておけばよくなるので、
長めのパネルをより細かく複数に分割しても問題なくなります。

9-2) キーボードショートカット

マウス操作をしなくても、以下のキーをビューウィンドウで打つだけで
モードが変更されます。
なお、二次元モードではr, R, u, Uは無効です。

キー  モード         パネルでの名前    補足
--------------------------------------------------------------------
o/O   その他         Other
t/T   移動           Translate
r/R   回転           Rotate            視野座標系のXY軸まわりの回転
u/U   上方向の回転   rotate Up vector  視野座標系のZ軸まわりの回転
s/S   拡大縮小       Scale

9-3) 矢印の表示

二次元/三次元ユーティリティの描画プリミティブに、
AutoGL_DrawArrow2D、AutoGL_DrawArrow3Dが追加されました。
ベクトルを指定すると、矢印が描画されます。

9-4) 透明度の変更

AutoGL_SetOpacityによりα値(不透明度)が指定できます。

9-5) ビューサイズの変更

AutoGL_ResizeViewにより、スクリーン上におけるビューサイズが
縦横のピクセル数で指定できます。
ただしこれは、「おてがる」OS-Xの場合を除き、
初期化コールバックAutoGL_SetUp内でのみ有効です。
初期化が終了してしまえば、以後ビューサイズの変更は
マウスを使って行わなければなりません。

9-6) 「おてがる」終了コール

AutoGL_Terminateにより、「おてがる」を正常に終了できます。
Quitボタンなどからexitコールの前に呼んでください。
なおこの機能は、「おてがる」-MPのオフライン版(OS-X)において、
バッチ処理を正常終了させる都合で用意されました。
Ctrl-Cによって出るMPIの失敗メッセージが気持悪い場合は、
これを呼んでみてください。






2. 後方互換性の問題について



1) OpenGLをダイレクトにコールしているコード

パフォーマンスチューニングをほとこした影響から、
そのままではOpenGLを直接呼んでいるコードが動作しない可能性があります。

そこで、一連のOpenGLコール群の前後に、
それぞれ以下の「おてがる」コールを挿入して下さい。

void AutoGL_BeginNativeCall (void);

void AutoGL_EndNativeCall (void);



2) FORTRANユーザー

FORTRANバインディングをcygwinでも動作するようにした結果、
これまでのコードが動作しなくなっています。

具体的には、autoglsetupがなくなって、
そのかわりFORTRANのメインルーチンからautoglmainをコールします。
また、autoglhandleeventやautoglcallback5-9など
いくつかのコールバックサブルーチンが追加されました。
ただし、実際に必要となるプログラム修正の量はごくわずかです。
詳しくは、sample_f/やmore_sample_f/の中のサンプルプログラムを御覧下さい。

なお、これまでのバージョンでsample_f/にあったtetra.fは、
修正してmore_sample_f/に移動しました。

それと、ライブラリ本体をコンパイルする際には、autogl_os.hを修正して下さい。
詳しくは、INSTALLにあります。
