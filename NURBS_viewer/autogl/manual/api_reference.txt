                     「おてがる」APIリファレンス

目次

1. 幾何演算
  1.1. トレランス管理 
  1.2. 二次元ベクトル演算 
  1.3. 三次元ベクトル演算

2. ユーザーインターフェイス管理 

3. グラフィックス
  3.1. レンダリング 
  3.2. ビューイングパラメータと座標変換 
  3.3. イメージ処理 
  3.4. 選択 
  3.5. イベント処理 

4. グラフィカルユーザーインターフェイス処理 

5. コマンドラインとスクリプティング処理 

6. ユーティリティ 
  6.1. コマンドライン処理とスクリプティング 
  6.2. イメージのセーブとロード

7. 可視化ユーティリティ 
  7.1. コンター
  7.2. 低レベル可視化API 
  7.3. 高レベル可視化API 

8. 二次元ユーティリティ 
  8.1. 二次元ビューイングパラメータ操作 
  8.2. 二次元描画プリミティブ 
  8.3. 二次元イベント処理 

9. 三次元ユーティリティ 
  9.1. 三次元ビューイングパラメータ操作 
  9.2. 三次元描画プリミティブ 
  9.3. 三次元イベント処理 













1. 幾何演算 



1.1. トレランス管理 

トレランス値を設定する。
void AutoGL_SetTolerance (double tolerance);

トレランス値を得る。
double AutoGL_GetTolerance (void);



1.2. 二次元ベクトル演算 

ベクトルをベクトルに代入する。
void AutoGL_AssignVector2D 
(double *x_OUT, double *y_OUT,
 double x, double y);

２つのベクトルを加算する。
void AutoGL_AddVector2D 
(double *x_OUT, double *y_OUT,
 double x0, double y0,
 double x1, double y1);

２つのベクトルを減算する。
void AutoGL_SubtractVector2D 
(double *x_OUT, double *y_OUT,
 double x0, double y0,
 double x1, double y1);

ベクトルとスカラーを乗算する。
void AutoGL_MultiplyVector2D 
(double *x_OUT, double *y_OUT,
 double x, double y,
 double scale);

ベクトルの長さを得る。
double AutoGL_GetVectorLength2D 
(double x, double y);

ベクトルを正規化する。
void AutoGL_NormalizeVector2D 
(double *x_OUT, double *y_OUT,
 double x, double y);

２つのベクトルのスカラー積を得る。
double AutoGL_GetScalarProduct2D 
(double x0, double y0,
 double x1, double y1);

２つのベクトルの距離を得る。
double AutoGL_GetVectorDistance2D 
(double x0, double y0,
 double x1, double y1);

２つのベクトルの成分ごとの最小値を得る。
void AutoGL_GetMinVector2D 
(double *x_OUT, double *y_OUT,
 double x0, double y0,
 double x1, double y1);

２つのベクトルの成分ごとの最大値を得る。
void AutoGL_GetMaxVector2D
(double *x_OUT, double *y_OUT,
 double x0, double y0,
 double x1, double y1);

ベクトルに垂直なベクトルを得る。
void AutoGL_GetAnyPerpendicularDirection2D 
(double *nx_OUT, double *ny_OUT,
 double x, double y);



1.3. 三次元ベクトル演算

ベクトルをベクトルに代入する。
void AutoGL_AssignVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x, double y, double z);

２つのベクトルを加算する。
void AutoGL_AddVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x0, double y0, double z0,
 double x1, double y1, double z1);

２つのベクトルを減算する。
void AutoGL_SubtractVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x0, double y0, double z0,
 double x1, double y1, double z1);

ベクトルとスカラーを乗算する。
void AutoGL_MultiplyVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x, double y, double z,
 double scale);

ベクトルの長さを得る。
double AutoGL_GetVectorLength3D 
(double x, double y, double z);

ベクトルを正規化する。
void AutoGL_NormalizeVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x, double y, double z);

２つのベクトルのスカラー積を得る。
double AutoGL_GetScalarProduct3D 
(double x0, double y0, double z0,
 double x1, double y1, double z1);

２つのベクトルのベクトル積を得る。
void AutoGL_GetVectorProduct3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x0, double y0, double z0,
 double x1, double y1, double z1);

２つのベクトルの距離を得る。
double AutoGL_GetVectorDistance3D 
(double x0, double y0, double z0,
 double x1, double y1, double z1);

２つのベクトルの成分ごとの最小値を得る。
void AutoGL_GetMinVector3D 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x0, double y0, double z0,
 double x1, double y1, double z1);

２つのベクトルの成分ごとの最大値を得る。
void AutoGL_GetMaxVector3D
(double *x_OUT, double *y_OUT, double *z_OUT,
 double x0, double y0, double z0,
 double x1, double y1, double z1);

ベクトルに垂直な２つのベクトルを得る。
void AutoGL_GetAnyPerpendicularDirection3D 
(double *nx0_OUT, double *ny0_OUT, double *nz0_OUT,
 double *nx1_OUT, double *ny1_OUT, double *nz1_OUT,
 double x, double y, double z);













2. ユーザーインターフェイス管理 



UIを作る
このルーチンは必ずユーザープログラム側に一つ存在しなければならない。
void AutoGL_SetUp (int argc, char *argv[]);



コールバック関数（引数なし、戻り値なし）へのポインタ型 
typedef void (*AutoGL_CallbackType) (void);

グループを登録する。 （パネルに対応する。） 
void AutoGL_AddGroup 
(const char *name);
name : グループ名 

コメントを登録する。 （ラベルに対応する。） 
void AutoGL_AddComment (void);
ラベル文字列はAutoGL_SetLabelで設定する。 

コールバック関数を登録する。 （ボタンに対応する。） 
void AutoGL_AddCallback 
(AutoGL_CallbackType callback, 
 const char *name);
callback : 関数名 
name : コールバック名 

論理変数を登録する。 （トグルに対応する。） 
void AutoGL_AddBoolean 
(int *value_IO, 
 const char *name);
value_IO : int型変数へのポインタ 
C++では、bool型変数からキャストしても良い。 
name : 論理変数名 

文字列変数を登録する。 （フィールドに対応する。） 
void AutoGL_AddString 
(char *value_IO, 
 const char *name, int length);
value_IO : char型変数配列 
name : 文字列変数名 
length : 配列長 

整数変数を登録する。 （フィールドまたはチョイスに対応する。） 
void AutoGL_AddInteger 
(int *value_IO, 
 const char *name);
value_IO : int型変数へのポインタ 
name : 整数変数名 
C++では、enum型変数からキャストしても良い。 

整数変数の最大最小レンジを登録する。 
void AutoGL_SetIntegerRange 
(int minValue, int maxValue);

整数変数の列挙値を加える。 （チョイスに対応する。）
void AutoGL_AddIntegerItem 
(const char *label);
label : 整数変数の値のラベル 

実数変数を登録する。 （フィールドに対応する。）
void AutoGL_AddReal 
(double *value_IO, 
 const char *name);
value_IO : double型変数へのポインタ 
name : 実数変数名 

実数変数の最大最小レンジを登録する。 
void AutoGL_SetRealRange 
(double minValue, double maxValue);

現在のコールバック関数・制御変数について、ラベルを設定する。 
void AutoGL_SetLabel 
(const char *label);
label : 関数・変数のラベル 

ビューの再描画用コールバック関数を登録する。 
void AutoGL_SetViewRedrawCallback 
(AutoGL_CallbackType callback);
callback : 関数名 

ビューのイベント処理コールバック関数を登録する。 
void AutoGL_SetViewEventCallback 
(AutoGL_CallbackType callback);
callback : 関数名 

アイドルイベント処理を有効にする。 
void AutoGL_EnableIdleEvent (void);

アイドルイベント処理コールバック関数を登録する。 
void AutoGL_SetIdleEventCallback 
(AutoGL_CallbackType callback);
callback : 関数名 

バッチ処理コールバック関数を登録する。
void AutoGL_SetBatchProcessCallback 
(AutoGL_CallbackType callback);
callback : 関数名 












3. グラフィックス



3.1. レンダリング 

ビューの背景色を設定する。 
void AutoGL_SetBackgroundColor 
(double red, double green, double blue);  
red, green, blue : 赤、緑、青について、それぞれ0.0 - 1.0のレンジの強度。 

鏡面反射を有効にする。 
void AutoGL_TurnOnSpecular (void);

半透明処理を有効にする。 
void AutoGL_TurnOnTransparency (void);

現在の色を設定する。 
void AutoGL_SetColor 
(double red, double green, double blue);  
red, green, blue : 赤、緑、青について、それぞれ0.0 - 1.0のレンジの強度。 

現在の不透明度を設定する。 
void AutoGL_SetOpacity (double opacity);  
opacity : 不透明度で、0.0 - 1.0のレンジの強度。 

線分を現在の色で描画する。
void AutoGL_DrawLine 
(double x0, double y0, double z0,    
 double x1, double y1, double z1); 
(x0, y0, z0), (x1, y1, z1) : 二点の世界座標 

三角形を現在の色で塗り潰す。
void AutoGL_DrawTriangle 
(double x0, double y0, double z0,  
 double x1, double y1, double z1,  
 double x2, double y2, double z2); 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : 三点の世界座標

三角形を色補間により塗り潰す。
void AutoGL_DrawColorInterpolatedTriangle 
(double x0, double y0, double z0, double red0, double green0, double blue0,  
 double x1, double y1, double z1, double red1, double green1, double blue1,  
 double x2, double y2, double z2, double red2, double green2, double blue2); 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : 三点の世界座標 
(red0, green0, blue0), (red1, green1, blue1), (red2, green2, blue2) : 三点の色 

三角形を法線ベクトル補間により塗り潰す。 
void AutoGL_DrawNormalInterpolatedTriangle 
(double x0, double y0, double z0, double nx0, double ny0, double nz0,
 double x1, double y1, double z1, double nx1, double ny1, double nz1,
 double x2, double y2, double z2, double nx2, double ny2, double nz2);
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : 三点の世界座標 
(nx0, ny0, nz0), (nx1, ny1, nz1), (nx2, ny2, nz2) : 三点の法線ベクトル 

四辺形を現在の色で塗り潰す。 
void AutoGL_DrawQuadrangle 
(double x0, double y0, double z0,
 double x1, double y1, double z1,
 double x2, double y2, double z2,
 double x3, double y3, double z3);
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2), (x3, y3, z3) : 四点の世界座標 
四点は同一平面上になくてもよい。 

文字列を現在の色で描画する。 
void AutoGL_DrawString 
(double x, double y, double z,
 const char *str);
(x, y, z) : 文字列の原点の世界座標 
str : 描画される文字列 

ディスプレイリストを開き、これを空にする。
void AutoGL_OpenDisplayList (void);

ディスプレイリストを閉じる。 
void AutoGL_CloseDisplayList (void);

ディスプレイリストを描画する。
void AutoGL_DrawDisplayList (void);

ディスプレイリストをファイルから読む。
void AutoGL_ReadDisplayList (FILE *fp);

ディスプレイリストをファイルに書く。
void AutoGL_WriteDisplayList (FILE *fp);

AutoGLメタファイルを読み出す。
void AutoGL_ReadMetafile 
(const char *fileName, int updateViewingParameterFlag);

AutoGLメタファイルに書き込む。
void AutoGL_WriteMetafile 
(const char *fileName);

AutoGLイメージファイル名を設定する。
void AutoGL_SetImageFileName 
(const char *fileName);

AutoGLイメージファイル名を得る。 
void AutoGL_GetImageFileName 
(char *fileName_OUT);

上記の各種描画命令の高速版。 
ディスプレイリストには登録されない。immediate mode用。
法線方向をあらかじめ計算しておくこと。
引数がすべてfloat型であることに注意。

void AutoGL_SetColor2 
(float red, float green, float blue);

void AutoGL_DrawLine2 
(float x0, float y0, float z0,
 float x1, float y1, float z1);

void AutoGL_DrawTriangle2 
(float x0, float y0, float z0,
 float x1, float y1, float z1,
 float x2, float y2, float z2,
 float nx, float ny, float nz);

void AutoGL_DrawColorInterpolatedTriangle2
(float x0, float y0, float z0, float red0, float green0, float blue0,  
 float x1, float y1, float z1, float red1, float green1, float blue1,  
 float x2, float y2, float z2, float red2, float green2, float blue2,
 float nx, float ny, float nz);

void AutoGL_DrawNormalInterpolatedTriangle2 
(float x0, float y0, float z0, float nx0, float ny0, float nz0,
 float x1, float y1, float z1, float nx1, float ny1, float nz1,
 float x2, float y2, float z2, float nx2, float ny2, float nz2);

void AutoGL_DrawString2 
(float x, float y, float z,
 const char *str);

void AutoGL_SetSelectionId2 (int id);

OpenGLなどのネイティブなグラフィックスAPIを直接用いる際に
ネイティブAPIコールの直前直後に呼び出す。

void AutoGL_BeginNativeCall (void);

void AutoGL_EndNativeCall (void);



3.2. ビューイングパラメータと座標変換 

世界座標系 : モデルが置かれている座標系。 
  三次元の実数座標系。

視点座標系 : 世界座標系が視野変換されたもの。 
  三次元の実数座標系。
  画面の中心が(0, 0, 0)に対応する。
  右方向がX方向, 上がY方向, 奥行きの手前側にZ方向。

デバイス座標系 : 視点座標系が実際の画面サイズにスケールされたもの。三次元。
  三次元の整数座標系。
  画面の中心が(0, 0, 0)に対応する。
  右方向がX方向, 上がY方向, 奥行きの手前側にZ方向。
  X Window SystemやWindowsのデバイス座標系とは異なることに注意！！！ 

ビューのサイズを設定する。
void AutoGL_SetViewSize (double size);
size : 実際の画面の半分の大きさに対応する,世界座標におけるビューのサイズ。

ビューの注視点を設定する。
void AutoGL_SetViewCenter (double x, double y, double z);
(x, y, z) : 注視点の座標 

ビューの視線方向を設定する。 
void AutoGL_SetViewDirection (double x, double y, double z);
(x, y, z) : 視線方向ベクトル 

ビューの視線上向き方向を設定する。 
void AutoGL_SetViewUpVector (double x, double y, double z);
(x, y, z) : 視線上向き方向ベクトル 

投影法を透視投影にするか、しない(平行投影)かを設定する。
void AutoGL_SetPerspectiveViewFlag (int flag);

ポリゴンを裏表とも描画するかどうかを設定する。
void AutoGL_SetTwoSideFaceFlag (int flag);

ビューのサイズを得る。 
double AutoGL_GetViewSize (void);

ビューの注視点を得る。 
void AutoGL_GetViewCenter 
(double *x_OUT, double *y_OUT, double *z_OUT);
(x_OUT, y_OUT, z_OUT) : 注視点の座標 

ビューの視線方向を得る。 
void AutoGL_GetViewDirection 
(double *x_OUT, double *y_OUT, double *z_OUT);
(x_OUT, y_OUT, z_OUT) : 視線方向ベクトル 

ビューの視線上向き方向を得る。 
void AutoGL_GetViewUpVector 
(double *x_OUT, double *y_OUT, double *z_OUT);
(x_OUT, y_OUT, z_OUT) : 視線上向き方向ベクトル 

ビューのデバイス座標系での高さと幅を得る。 
void AutoGL_GetViewRangeDc 
(int *widthDc_OUT, int *heightDc_OUT);
widthDc_OUT : ビューの幅 
heightDc_OUT : ビューの高さ 

ビューのデバイス座標系でのサイズを得る。 
int AutoGL_GetViewSizeDc (void); 

デバイス座標から視点座標を得る。 
void AutoGL_GetVcOfDc 
(double *vcX_OUT, double *vcY_OUT, double *vcZ_OUT,
 int dcX, int dcY, int dcZ);
(dcX, dcY, dcZ) : デバイス座標 
(vcX_OUT, vcY_OUT, vcZ_OUT) : 視点座標 

視点座標から世界座標を得る。 
void AutoGL_GetPositionOfVc 
(double *x_OUT, double *y_OUT, double *z_OUT,
 double vcX, double vcY, double vcZ);
(vcX, vcY, vcZ) : 視点座標 
(x_OUT, y_OUT, z_OUT) : 世界座標 

デバイス座標から世界座標を得る。 
void AutoGL_GetPositionOfDc 
(double *x_OUT, double *y_OUT, double *z_OUT,
 int dcX, int dcY, int dcZ);
(dcX, dcY, dcZ) : デバイス座標 
(x_OUT, y_OUT, z_OUT) : 世界座標 

投影法が透視投影かどうか。
int AutoGL_GetPerspectiveViewFlag ();

ポリゴンを裏表とも描画するかどうか。
int AutoGL_GetTwoSideFaceFlag ();



3.3. イメージ処理 

ビューのイメージを得る。 
void AutoGL_GetViewImage
(unsigned char image_OUT[]);
image_OUT : ビューの幅 x 高さ x 3 byte (24bit)の大きさの配列 
各ピクセルごとに、RGBの各成分が0-255で得られる。 
unsigned char image_OUT[heightDc][widthDC][3] 



3.4. 選択 

選択処理を開始する。
void AutoGL_StartSelection (int x, int y, int range);

現在の選択候補オブジェクトIDを設定する。
void AutoGL_SetSelectionId (int id);

選択処理を終了する。
void AutoGL_EndSelection (void);

実際に選択された選択候補オブジェクトIDを返す。
int AutoGL_GetSelectedId (void);



3.5. イベント処理 

AUTOGL_EVENT_ イベントのタイプ 
ポインタのボタンが押された。 
#define AUTOGL_EVENT_POINTING_DEVICE_PRESS 0
ポインタがドラッグされた。 
#define AUTOGL_EVENT_POINTING_DEVICE_DRAG 1
ポインタのボタンが離された。 
#define AUTOGL_EVENT_POINTING_DEVICE_RELEASE 2
キーボードのキーが押された。 
#define AUTOGL_EVENT_KEY 3

イベントのタイプを得る。 
int AutoGL_GetViewEvent (void);   AUTOGL_EVENT_ 

ポインティングデバイスの位置を得る。 
void AutoGL_GetPointingDevicePositionDc 
(int *dcX_OUT, int *dcY_OUT, int *dcZ_OUT);
dcX_OUT, dcY_OUT, dcZ_OUT : ポインタのデバイス座標 

キーボードキーを得る。 
int AutoGL_GetKeyChar (void);
















4. グラフィカルユーザーインターフェイス処理 



ビューのサイズを変更する。 
void AutoGL_ResizeView (int widthDc, int heightDc);

ビューを再描画する。 
void AutoGL_DrawView (void);
ビューの再描画関数が呼び出される。 

AutoGLの終了処理をする。 
void AutoGL_Terminate (void);
自分で用意したQuitボタンなどから, exit()の直前に呼び出す。 


















5. コマンドラインとスクリプティング処理 



ファイルからコマンドを解釈・処理する。 
void AutoGL_InterpretInBatchMode (FILE *in, FILE *out);
in : コマンドの入力先 
out : コマンド処理結果の出力先 

標準入力からコマンドを解釈・処理する。 
void AutoGL_InterpretInInteractiveMode (void);
コマンドの処理結果は標準出力に表示される。 

スクリプトファイルを解釈・処理する。 
void AutoGL_InterpretScript (char *fileName);
fileName : スクリプトファイル名 
コマンドの処理結果は標準出力に表示される。 


















6. ユーティリティ 



6.1. コマンドライン処理とスクリプティング 

コマンドライン処理とスクリプティング機能をパネルに準備する。 
void AutoGL_SetPanelForInterpreter (void);



6.2. イメージのセーブとロード

PPMファイルにビューのイメージを保存する。
void AutoGL_SaveViewImageToPPMFile (const char *fileName);

PPMファイルからイメージを読み出す。
void AutoGL_ReadImageFromPPMFile 
(const char *fileName,
 int *widthDcPtr_OUT, int *heightDcPtr_OUT, unsigned char **imagePtr_OUT);

画面セーブ機能をパネルに準備する。
void AutoGL_SetPanelForSave (void);














7. 可視化ユーティリティ 



7.1. コンタ-

コンタ-マップのカラーテーブルをクリアする。 
void AutoGL_ClearContourColor (void);

コンタ-マップのカラーテーブルにグレードごとの色を設定する。 
void AutoGL_AddContourColorOfGrade 
(double grade, 
 double red, double green, double blue);

グレイスケールのコンタ-マップを設定する。 
void AutoGL_SetGrayScaleContourMap (void);

青、水色、緑、黄色、赤、紫の順で虹色のコンタ-マップを設定する。 
void AutoGL_SetContourMap_BCGYRM (void);

紫、青、水色、緑、黄色、赤の順で虹色のコンタ-マップを設定する。 
void AutoGL_SetContourMap_MBCGYR (void);

青、水色、緑、黄色、赤の順で虹色のコンタ-マップを設定する。 
void AutoGL_SetContourMap_BCGYR (void);

コンタ-の値に対応する色を得る。 
void AutoGL_GetContourColor 
(double *red_OUT, double *green_OUT, double *blue_OUT,
 double grade);
red_OUT, green_OUT, blue_OUT : 赤、緑、青について、
  それぞれ0.0 - 1.0のレンジの強度。
grade : 0.0 - 1.0に規格化された値。 

三角形をコンタ-で塗り潰す。 
void AutoGL_DrawContourTriangle 
(double x0, double y0, double z0, double grade0,  
 double x1, double y1, double z1, double grade1,  
 double x2, double y2, double z2, double grade2); 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : 三点の世界座標 
grade0, grade1, grade2 : 三点のスカラー値（0.0 - 1.0に規格化） 

画面右に面コンタ-での色と値との対応表をバー表示する。 
void AutoGL_DrawContourMap 
(int sizeDc,
 double minRange, double maxRange);
sizeDc : 画面に占めるデバイス座標系での幅 
minRange, maxRange : スカラー値の最大最小 

画面右に線コンタ-での色と値との対応表をバー表示する。 
void AutoGL_DrawLineContourMap 
(int sizeDc,
 double minRange, double maxRange,
 int nGrades);
sizeDc : 画面に占めるデバイス座標系での幅 
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 

画面右にバンドコンタ-での色と値との対応表をバー表示する。 
void AutoGL_DrawBandContourMap 
(int sizeDc,
 double minRange, double maxRange,
 int nGrades);
sizeDc : 画面に占めるデバイス座標系での幅 
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 



7.2. 低レベル可視化API 

１つの六面体を６つの四面体に分割するさいの頂点対応表 
extern int AutoGL_HexToTetraMap[6][4];

三角形から等高線（等値線）データを計算する。 
int AutoGL_GetIsoline 
(int vertexIds0_OUT[2],
 int vertexIds1_OUT[2],
 double ratios_OUT[2],
 double levelValue, 
 double triValues[3]);
vertexIds0_OUT, vertexIds0_OUT : 等高線の三角形における頂点番号 
ratios_OUT : 上記２頂点間の補間比率 
levelValue : 等高線のスカラー値 
triValues : 三角形の各頂点のスカラー値 

三角形から等高線（等値線）の頂点を計算する。 
void AutoGL_GetIsolineVertex 
(double points_OUT[2][3],
 double triPoints[3][3], 
 int vertexIds0[2],
 int vertexIds1[2],
 double ratios[2]);
points_OUT : 等高線の頂点座標 
triPoints : 三角形の各頂点の座標 
nVertexs : 等高線の頂点数 
vertexIds0, vertexIds0 : 等高線の三角形における頂点番号 
ratios : 上記２頂点間の補間比率 

三角形の等高線（等値線）を描画する。 
void AutoGL_DrawTriangleIsoline 
(double levelValue,
 double triPoints[3][3],
 double triValues[3]);
levelValue : 等高線のスカラー値 
triPoints : 三角形の各頂点の座標 
triValues : 三角形の各頂点のスカラー値 

四面体から等高面（等値面）データを計算する。 
int AutoGL_GetIsosurface 
(int *nVertexs_OUT,
 int vertexIds0_OUT[4],
 int vertexIds1_OUT[4],
 double ratios_OUT[4],
 double levelValue, 
 double tetraValues[4]);
nVertexs_OUT : 等値面の頂点数 
vertexIds0_OUT, vertexIds0_OUT : 等値面の四面体における頂点番号 
ratios_OUT : 上記２頂点間の補間比率 
levelValue : 等高線のスカラー値 
tetraValues : 四面体の各頂点のスカラー値 

四面体から等高面（等値面）の頂点を計算する。 
void AutoGL_GetIsosurfaceVertex 
(double points_OUT[4][3],
 double tetraPoints[4][3], 
 int nVertexs, 
 int vertexIds0[4],
 int vertexIds1[4],
 double ratios[4]);
points_OUT : 等値面の頂点座標 
tetraPoints : 四面体の各頂点の座標 
nVertexs : 等値面の頂点数 
vertexIds0, vertexIds0 : 等値面の四面体における頂点番号 
ratios : 上記２頂点間の補間比率 

四面体の等高面（等値面）を描画する。 
void AutoGL_DrawTetrahedronIsosurface 
(double levelValue,
 double tetraPoints[4][3],
 double tetraValues[4]);
levelValue : 等高線のスカラー値 
tetraPoints : 四面体の各頂点の座標 
tetraValues : 四面体の各頂点のスカラー値 

四面体と平面との交差断面の面コンタ-を描画する。 
void AutoGL_DrawTetrahedronSectionContour 
(double a, double b, double c, double d,
 double tetraPoints[4][3],
 double tetraGrades[4]);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
tetraPoints : 四面体の各頂点の座標 
tetraGrades : 四面体の各頂点のスカラー値を0.0 - 1.0に正規化したもの 



7.3. 高レベル可視化API 

三角形をスムーズコンターで塗りつぶす。 
void AutoGL_DrawSmoothContourTriangle 
(double minRange, double maxRange,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2);
minRange, maxRange : スカラー値の最大最小 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : ３点の世界座標 
value0, value1, value2 : ３点のスカラー値 

三角形を線コンターで塗りつぶす。 
void AutoGL_DrawLineContourTriangle 
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2); 
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : ３点の世界座標 
value0, value1, value2 : ３点のスカラー値 

三角形をバンドコンターで塗りつぶす。 
void AutoGL_DrawBandContourTriangle 
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2);
minRange, maxRange : スカラー値の最大最小 
nGrades : バンドコンタ-の本数 (-1) 
(x0, y0, z0), (x1, y1, z1), (x2, y2, z2) : ３点の世界座標 
value0, value1, value2 : ３点のスカラー値 

四辺形をスムーズコンターで塗りつぶす。 
void AutoGL_DrawSmoothContourQuadrangle 
(double minRange, double maxRange,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
minRange, maxRange : スカラー値の最大最小 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四辺形を線コンターで塗りつぶす。 
void AutoGL_DrawLineContourQuadrangle 
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四辺形をバンドコンターで塗りつぶす。 
void AutoGL_DrawBandContourQuadrangle 
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
minRange, maxRange : スカラー値の最大最小 
nGrades : バンドコンタ-の本数 (-1) 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四面体を等値面で塗りつぶす。 
void AutoGL_DrawIsosurfaceTetrahedron
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四面体と平面との交差断面をスムーズコンターで塗りつぶす。 
void AutoGL_DrawSectionSmoothContourTetrahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四面体と平面との交差断面を線コンターで塗りつぶす。 
void AutoGL_DrawSectionLineContourTetrahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

四面体と平面との交差断面をバンドコンターで塗りつぶす。 
void AutoGL_DrawSectionBandContourTetrahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
nGrades : バンドコンタ-の本数 (-1) 
(x0, y0, z0) - (x3, y3, z3) : ４点の世界座標 
value0 - value3 : ４点のスカラー値 

六面体を等値面で塗りつぶす。 
void AutoGL_DrawIsosurfaceHexahedron
(double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3,
 double x4, double y4, double z4, double value4,  
 double x5, double y5, double z5, double value5,  
 double x6, double y6, double z6, double value6,  
 double x7, double y7, double z7, double value7);
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0) - (x7, y7, z7) : ８点の世界座標 
value0 - value7 : ８点のスカラー値 

六面体と平面との交差断面をスムーズコンターで塗りつぶす。 
void AutoGL_DrawSectionSmoothContourHexahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3,
 double x4, double y4, double z4, double value4,  
 double x5, double y5, double z5, double value5,  
 double x6, double y6, double z6, double value6,  
 double x7, double y7, double z7, double value7);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
(x0, y0, z0) - (x7, y7, z7) : ８点の世界座標 
value0 - value7 : ８点のスカラー値 

六面体と平面との交差断面を線コンターで塗りつぶす。 
void AutoGL_DrawSectionLineContourHexahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3,
 double x4, double y4, double z4, double value4,  
 double x5, double y5, double z5, double value5,  
 double x6, double y6, double z6, double value6,  
 double x7, double y7, double z7, double value7);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
nGrades : 線コンタ-の本数 (-1) 
(x0, y0, z0) - (x7, y7, z7) : ８点の世界座標 
value0 - value7 : ８点のスカラー値 

六面体と平面との交差断面をバンドコンターで塗りつぶす。 
void AutoGL_DrawSectionBandContourHexahedron
(double a, double b, double c, double d,
 double minRange, double maxRange,
 int nGrades,
 double x0, double y0, double z0, double value0,  
 double x1, double y1, double z1, double value1,  
 double x2, double y2, double z2, double value2,  
 double x3, double y3, double z3, double value3,
 double x4, double y4, double z4, double value4,  
 double x5, double y5, double z5, double value5,  
 double x6, double y6, double z6, double value6,  
 double x7, double y7, double z7, double value7);
a, b, c, d : 断面の方程式ax+by+cz+d=0の係数 
minRange, maxRange : スカラー値の最大最小 
nGrades : バンドコンタ-の本数 (-1) 
(x0, y0, z0) - (x7, y7, z7) : ８点の世界座標 
value0 - value7 : ８点のスカラー値 















8. 二次元ユーティリティ 



8.1. 二次元ビューイングパラメータ操作 

ビューイングパラメータ設定機能をパネルに準備する。 
void AutoGL_SetPanelInView2D (void);



8.2. 二次元描画プリミティブ 

座標系にアラインされた箱を表示する。 
void AutoGL_DrawBox2D 
(double p0X, double p0Y,
 double p1X, double p1Y, 
 double z);

十字マークを表示する。 
void AutoGL_DrawCrossMark2D 
(double pX, double pY, double pZ,
 int sizeDc);

ダイアモンドマークを表示する。 
void AutoGL_DrawDiamondMark2D 
(double pX, double pY, double pZ,
 int sizeDc, int isFilled);

正方形マークを表示する。 
void AutoGL_DrawSquareMark2D 
(double pX, double pY, double pZ,
 int sizeDc, int isFilled);

矢印を表示する。 
void AutoGL_DrawArrow2D 
(double x0, double y0,
 double x1, double y1, 
 double z,
 double tipRatio)
tipRatio : 全体長さに対する矢印先端サイズの比 



8.3. 二次元イベント処理 

AUTOGL_MODE_2D_  
ユーザー定義イベント処理モード 
#define AUTOGL_MODE_2D_OTHER 0
移動モード 
#define AUTOGL_MODE_2D_TRANSLATE 1
拡大縮小モード 
#define AUTOGL_MODE_2D_SCALE 2

移動拡大縮小機能をパネルに準備する。 
void AutoGL_SetPanelInMode2D (void);

イベント処理モードを設定する。 
void AutoGL_SetMode2D (int mode);   AUTOGL_MODE_2D_ 

イベント処理モードを得る。 
int AutoGL_GetMode2D (void);        AUTOGL_MODE_2D_  

ドラッグ中に描画を行う。 
void AutoGL_EnableDragInMode2D (void);

ユーザー定義イベント処理コールバックを設定する。 
void AutoGL_SetDefaultCallbackInMode2D 
(AutoGL_CallbackType otherCallback);
otherCallback : ユーザー定義イベント処理コールバック 
これはNULLでもよい。 

デフォルトのキーイベント処理 
ユーザー定義イベント処理コールバックから呼ぶ。 
void AutoGL_HandleDefaultKeyEventInMode2D (void);

ポインティングデバイスがヒットしたかを調べる。 
int AutoGL_PointingDeviceIsHit2D 
(double pX, double pY,
 int toleranceDc);
(pX, pY) : 世界座標, ただし二次元 
toleranceDc : デバイス座標系での幅 



















9. 三次元ユーティリティ 



9.1. 三次元ビューイングパラメータ操作 

ビューイングパラメータ設定機能をパネルに準備する。 
void AutoGL_SetPanelInView3D (void);

ビューを相対的に回転する。 
void AutoGL_RotateView 
(double offsetX, double offsetY, double offsetZ);
offsetX, offsetY, offsetZ     around -1.0 ... 1.0 



9.2. 三次元描画プリミティブ 

座標系にアラインされた箱を表示する。 
void AutoGL_DrawBox3D 
(double p0X, double p0Y, double p0Z,
 double p1X, double p1Y, double p1Z);

十字マークを表示する。 
void AutoGL_DrawCrossMark3D 
(double pX, double pY, double pZ,
 int sizeDc);

ダイアモンドマークを表示する。 
void AutoGL_DrawDiamondMark3D 
(double pX, double pY, double pZ,
 int sizeDc, int isFilled);
isFilled : 塗り潰す（ソリッド表示）かどうか 

立方体マークを表示する。 
void AutoGL_DrawCubeMark3D 
(double pX, double pY, double pZ,
 int sizeDc, int isFilled);
isFilled : 塗り潰す（ソリッド表示）かどうか 

矢印を表示する。 
void AutoGL_DrawArrow3D 
(double x0, double y0, double z0,
 double x1, double y1, double z1, 
 double tipRatio);
tipRatio : 全体長さに対する矢印先端サイズの比 

左下に座標系を表示する。 
void AutoGL_DrawCoordinateSystem3D 
(int sizeDc);

球を表示する。 
void AutoGL_DrawSphere3D 
(double centerX, double centerY, double centerZ,
 double radius, 
 int nDivisions);
centerX, centerY, centerZ : 中心 
radius : 半径 
nDivisions : 分割数 

円柱を表示する。 
void AutoGL_DrawCylinder3D 
(double bottomX, double bottomY, double bottomZ,
 double topX, double topY, double topZ,
 double radius, 
 int nDivisions);
bottomX, bottomY, bottomZ : 下底面の中心 
topX, topY, topZ : 上底面の中心 
radius : 半径 
nDivisions : 分割数 

円錐を表示する。 
void AutoGL_DrawCone3D 
(double bottomX, double bottomY, double bottomZ,
 double topX, double topY, double topZ,
 double radius, 
 int nDivisions);
bottomX, bottomY, bottomZ : 底面の中心 
topX, topY, topZ : 円錐の先点 
radius : 半径 
nDivisions : 分割数 

円を表示する。 
void AutoGL_DrawCircle3D 
(double centerX, double centerY, double centerZ,
 double normalX, double normalY, double normalZ,
 double radius, 
 int nDivisions);
centerX, centerY, centerZ : 中心 
normalX, normalY, normalZ : 円が存在する平面の法線ベクトル 
radius : 半径 
nDivisions : 分割数 

座標系にアラインされた箱をソリッド表示する。 
void AutoGL_FillBox3D 
(double x0, double y0, double z0,
 double x1, double y1, double z1);



9.3. 三次元イベント処理 

AUTOGL_MODE_3D_  
ユーザー定義イベント処理モード 
#define AUTOGL_MODE_3D_OTHER 0
移動モード 
#define AUTOGL_MODE_3D_TRANSLATE 1
回転モード（XY軸まわり） 
#define AUTOGL_MODE_3D_ROTATE_XY 2
回転モード（Z軸まわり） 
#define AUTOGL_MODE_3D_ROTATE_Z 3
拡大縮小モード 
#define AUTOGL_MODE_3D_SCALE 4

移動回転拡大縮小機能をパネルに準備する。 
void AutoGL_SetPanelInMode3D (void);

イベント処理モードを設定する。 
void AutoGL_SetMode3D (int mode);    AUTOGL_MODE_3D_  

イベント処理モードを得る。 
int AutoGL_GetMode3D (void);         AUTOGL_MODE_3D_  

ドラッグ中に描画を行う。 
void AutoGL_EnableDragInMode3D (void);

ユーザー定義イベント処理コールバックを設定する。 
void AutoGL_SetDefaultCallbackInMode3D 
(AutoGL_CallbackType otherCallback);
otherCallback : ユーザー定義イベント処理コールバック 
これはNULLでもよい。 

デフォルトのキーイベント処理 
ユーザー定義イベント処理コールバックから呼ぶ。 
void AutoGL_HandleDefaultKeyEventInMode3D (void);

ポインティングデバイスがヒットしたかを調べる。 
int AutoGL_PointingDeviceIsHit3D 
(double *parameter_OUT,
 double pX, double pY, double pZ,
 int toleranceDc);
parameter_OUT : 深さ情報 
(pX, pY, pZ) : 世界座標 
toleranceDc : デバイス座標系での幅 



